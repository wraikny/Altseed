
#pragma once

#include <stdio.h>
#include <stdint.h>
#include <memory>
#include <vector>

#include "asd.CoreToEngine.h"

namespace asd {


class File;
class MediaPlayer;
class Sound;
class SoundSource;
class StaticFile;
class StreamFile;
class Tool;
class AutoGeneratedWrapperAccessor;

/**
	@brief ファイルの操作に関する処理を提供するクラス 
*/
class File {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class File;
	friend class MediaPlayer;
	friend class Sound;
	friend class SoundSource;
	friend class StaticFile;
	friend class StreamFile;
	friend class Tool;
	friend class Graphics;
	friend class AutoGeneratedWrapperAccessor;
	File(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~File();
	
	/**
		@brief 一括読込のファイルを生成する。 
		@param path ファイルパス 
		@return ファイル 
	*/
	std::shared_ptr<StaticFile> CreateStaticFile(const char16_t* path);
	
	/**
		@brief 一括読込のファイルを非同期に生成する。 
		@param path ファイルパス 
		@return ファイル 
	*/
	std::shared_ptr<StaticFile> CreateStaticFileAsync(const char16_t* path);
	
	/**
		@brief 逐次読込のファイルを生成する。 
		@param path ファイルパス 
		@return ファイル 
	*/
	std::shared_ptr<StreamFile> CreateStreamFile(const char16_t* path);
	
	/**
		@brief ファイル操作する時のルートのディレクトリを追加する。 
		@param path ルートのディレクトリのパス 
	*/
	void AddRootDirectory(const char16_t* path);
	
	/**
		@brief ファイル操作する時のルートのパスワード付パッケージを追加する。 
		@param path パッケージのパス 
		@param password パスワード 
	*/
	void AddRootPackageWithPassword(const char16_t* path,const char16_t* password);
	
	/**
		@brief ファイル操作する時のルートのパッケージを追加する。 
		@param path パッケージのパス 
	*/
	void AddRootPackage(const char16_t* path);
	
	/**
		@brief 追加されたパッケージを全て消去する。 
	*/
	void ClearRootDirectories();
	
	/**
		@brief ファイルが存在するか取得する。 
		@param path ファイルのパス 
		@return ファイルが存在するか? 
	*/
	bool Exists(const char16_t* path) const;
	
};

/**
	@brief 映像ファイルを再生するためのクラス 
*/
class MediaPlayer {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class File;
	friend class MediaPlayer;
	friend class Sound;
	friend class SoundSource;
	friend class StaticFile;
	friend class StreamFile;
	friend class Tool;
	friend class Graphics;
	friend class AutoGeneratedWrapperAccessor;
	MediaPlayer(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~MediaPlayer();
	
	/**
		@brief 映像を再生する。 
		@param isLoopingMode ループ再生するか? 
	*/
	bool Play(bool isLoopingMode);
	
	/**
		@brief 映像を読み込む。 
		@param path ファイルのパス 
	*/
	bool Load(const char16_t* path);
	
	/**
		@brief 現在の映像をテクスチャに書き込む。 
		@param target 書き込み先 
	*/
	bool WriteToTexture2D(std::shared_ptr<Texture2D> target);
	
	/**
		@brief 読み込んだ映像の大きさを取得する。 
	*/
	Vector2DI GetSize() const;
	
	/**
		@brief 現在再生中の映像のフレーム番号を取得する。 
	*/
	int32_t GetCurrentFrame() const;
	
};

/**
	@brief 音を管理するクラス 
*/
class Sound {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class File;
	friend class MediaPlayer;
	friend class Sound;
	friend class SoundSource;
	friend class StaticFile;
	friend class StreamFile;
	friend class Tool;
	friend class Graphics;
	friend class AutoGeneratedWrapperAccessor;
	Sound(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~Sound();
	
	/**
		@brief 音を読み込む。 
		@param path パス 
		@param isDecompressed 解凍するか? 
		@return 音源 
	*/
	std::shared_ptr<SoundSource> CreateSoundSource(const char16_t* path,bool isDecompressed);
	
	/**
		@brief 音を再生する。 
		@param soundSource 音源 
		@return ID 
	*/
	int32_t Play(std::shared_ptr<SoundSource> soundSource);
	
	/**
		@brief 音が再生中か、取得する。 
		@param id ID 
		@return 再生中か? 
	*/
	bool GetIsPlaying(int32_t id);
	
	/**
		@brief 全ての再生中の音を停止する。 
	*/
	void StopAll();
	
	/**
		@brief 指定した音を停止する。 
		@param id ID 
	*/
	void Stop(int32_t id);
	
	/**
		@brief 指定した音を一時停止する。 
		@param id ID 
	*/
	void Pause(int32_t id);
	
	/**
		@brief 指定した一時停止中の音の一時停止を解除する。 
		@param id ID 
	*/
	void Resume(int32_t id);
	
	/**
		@brief 指定した音の音量を設定する。 
		@param id ID 
		@param volume 音量(0.0～1.0) 
	*/
	void SetVolume(int32_t id,float volume);
	
	/**
		@brief 指定した音をフェードインさせる。 
		@param id ID 
		@param second フェードインに使用する時間(秒) 
	*/
	void FadeIn(int32_t id,float second);
	
	/**
		@brief 指定した音をフェードアウトさせる。 
		@param id ID 
		@param second フェードアウトに使用する時間(秒) 
	*/
	void FadeOut(int32_t id,float second);
	
	/**
		@brief 任意の音量に音量を一定時間かけて変更する。 
		@param id 音のID 
		@param second 変更にかかる時間(秒) 
		@param targetedVolume 変更先の音量(0.0～1.0) 
	*/
	void Fade(int32_t id,float second,float targetedVolume);
	
	/**
		@brief 再生速度変更するかを取得する。 
		@param id 音のID 
		@return 再生速度変更するか? 
	*/
	bool GetIsPlaybackSpeedEnabled(int32_t id);
	
	/**
		@brief 再生速度変更するかを設定する。 
		@param id 音のID 
		@param isPlaybackSpeedEnabled 再生速度変更するか? 
	*/
	void SetIsPlaybackSpeedEnabled(int32_t id,bool isPlaybackSpeedEnabled);
	
	/**
		@brief 再生速度を取得する。 
		@param id 音のID 
		@return 再生速度(比率) 
	*/
	float GetPlaybackSpeed(int32_t id);
	
	/**
		@brief 再生速度を設定する。 
		@param id 音のID 
		@param playbackSpeed 再生速度(比率) 
	*/
	void SetPlaybackSpeed(int32_t id,float playbackSpeed);
	
	/**
		@brief パン位置を取得する。 
		@param id 音のID 
		@return パン位置, 0.0で中央, -1.0で左, 1.0で右。 
	*/
	float GetPanningPosition(int32_t id);
	
	/**
		@brief パン位置を設定する。 
		@param id 音のID 
		@param panningPosition パン位置, 0.0で中央, -1.0で左, 1.0で右。 
	*/
	void SetPanningPosition(int32_t id,float panningPosition);
	
};

/**
	@brief 音源のクラス 
*/
class SoundSource {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class File;
	friend class MediaPlayer;
	friend class Sound;
	friend class SoundSource;
	friend class StaticFile;
	friend class StreamFile;
	friend class Tool;
	friend class Graphics;
	friend class AutoGeneratedWrapperAccessor;
	SoundSource(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~SoundSource();
	
	/**
		@brief ループポイントの開始地点(秒)を取得する。 
		@return 開始地点(秒) 
	*/
	float GetLoopStartingPoint() const;
	
	/**
		@brief ループポイントの開始地点(秒)を設定する。 
		@param startingPoint 開始地点(秒) 
	*/
	void SetLoopStartingPoint(float startingPoint);
	
	/**
		@brief ループポイントの終了地点(秒)を取得する。 
		@return 終了地点(秒) 
	*/
	float GetLoopEndPoint() const;
	
	/**
		@brief ループポイントの終了地点(秒)を設定する。 
		@param endPoint 終了地点(秒) 
	*/
	void SetLoopEndPoint(float endPoint);
	
	/**
		@brief ループするかを取得する。 
		@return ループするか? 
	*/
	bool GetIsLoopingMode() const;
	
	/**
		@brief ループするかを設定する。 
		@param isLoopingMode ループするか? 
	*/
	void SetIsLoopingMode(bool isLoopingMode);
	
	/**
		@brief 音の長さを取得する。 
		@return 長さ(秒) 
	*/
	float GetLength();
	
};

/**
	@brief 一括してファイルを読み込むクラス 
*/
class StaticFile {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class File;
	friend class MediaPlayer;
	friend class Sound;
	friend class SoundSource;
	friend class StaticFile;
	friend class StreamFile;
	friend class Tool;
	friend class Graphics;
	friend class AutoGeneratedWrapperAccessor;
	StaticFile(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~StaticFile();
	
	/**
		@brief 読み込まれたバッファを取得する。 
		@return バッファ 
	*/
	const std::vector<uint8_t>& GetBuffer() const;
	
	/**
		@brief ファイルのパスを取得する。 
		@return パス 
	*/
	const char16_t* GetFullPath() const;
	
	/**
		@brief 読み込まれたバッファの先頭のポインタを取得する。 
		@return ポインタ 
	*/
	void* GetData();
	
	/**
		@brief 読み込まれたバッファのサイズを取得する。 
		@return サイズ 
	*/
	int32_t GetSize();
	
	/**
		@brief パッケージ内からファイルが読み込まれているかを取得する。 
		@return パッケージ内からファイルが読み込まれているか? 
	*/
	bool GetIsInPackage() const;
	
	/**
		@brief ファイルの非同期読み込みの進捗を取得する。 
		@return ファイルの非同期読み込みの進捗を表す列挙子。 
	*/
	LoadState GetLoadState() const;
	
};

/**
	@brief 部分的にファイルを読み込むクラス 
*/
class StreamFile {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class File;
	friend class MediaPlayer;
	friend class Sound;
	friend class SoundSource;
	friend class StaticFile;
	friend class StreamFile;
	friend class Tool;
	friend class Graphics;
	friend class AutoGeneratedWrapperAccessor;
	StreamFile(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~StreamFile();
	
	/**
		@brief ファイルのサイズを取得する。 
		@return サイズ 
	*/
	int32_t GetSize() const;
	
	/**
		@brief ファイル内で現在読み込んでいる位置を取得する。 
		@return 現在読み込んでいる位置 
	*/
	int32_t GetCurrentPosition() const;
	
	/**
		@brief ファイルからデータを読み込み、一時的なバッファに格納する。 
		@param size 読み込むサイズ 
		@return 読み込んだサイズ 
	*/
	int32_t Read(int32_t size);
	
	/**
		@brief 読み込まれた一時的なバッファの先頭のポインタを取得する。 
		@return ポインタ 
	*/
	void* GetTempBuffer();
	
	/**
		@brief 読み込まれた一時的なバッファのサイズを取得する。 
		@return サイズ 
	*/
	int32_t GetTempBufferSize();
	
	
/**
	@brief	指定したサイズ分、ファイルを読み込む。
	@param	buffer	出力先
	@param	size	読み込まれるサイズ
*/
void Read(std::vector<uint8_t>& buffer, int32_t size)
{
	auto result = Read(size);
	buffer.resize(result);
	memcpy(buffer.data(), GetTempBuffer(), result);
}

};

/**
	@brief ツールを開発するための低レイヤーな命令群のクラス 
*/
class Tool {
	void* self = nullptr;
	bool isCtrlSelf = false;
	friend class File;
	friend class MediaPlayer;
	friend class Sound;
	friend class SoundSource;
	friend class StaticFile;
	friend class StreamFile;
	friend class Tool;
	friend class Graphics;
	friend class AutoGeneratedWrapperAccessor;
	Tool(void* self, bool isCtrlSelf);
	public:
	/**
		@brief 
	*/
	virtual ~Tool();
	
	/**
		@brief フルスクリーンでウインドウの表示を開始する。 
		@param name ウインドウ名 
		@param offset ウインドウ上部の位置のオフセット 
	*/
	bool BeginFullscreen(const char16_t* name,int32_t offset);
	
	/**
		@brief ウインドウの表示を開始する。 
		@param name ウインドウ名 
	*/
	bool Begin(const char16_t* name);
	
	/**
		@brief ウインドウの表示を終了する。 
	*/
	void End();
	
	/**
		@brief 分割線を表示する。 
	*/
	void Separator();
	
	/**
		@brief 次に表示する要素を改行せずに表示する。 
	*/
	void SameLine();
	
	/**
		@brief テキストを表示する。 
		@param text テキスト名 
	*/
	void Text(const char16_t* text);
	
	/**
		@brief ボタンを表示する。 
		@param label ラベル名 
	*/
	bool Button(const char16_t* label);
	
	/**
		@brief 画像を表示する。 
		@param user_texture 画像 
		@param size 大きさ 
	*/
	void Image(std::shared_ptr<Texture2D> user_texture,const Vector2DF& size);
	
	/**
		@brief コンボボックスを表示する。 
		@param label ラベル名 
		@param preview_value コンボボックスの先頭に表示される文字列 
	*/
	bool BeginCombo(const char16_t* label,const char16_t* preview_value);
	
	/**
		@brief コンボボックスを表示を終了する。 
	*/
	void EndCombo();
	
	/**
		@brief 文字を入力する。 
		@param label ラベル名 
		@param buf 文字が格納されるバッファ 
		@param buf_size バッファサイズ 
	*/
	bool InputText(const char16_t* label,int8_t* buf,int32_t buf_size);
	
	/**
		@brief 整数を入力する。 
		@param label ラベル名 
		@param v 値 
	*/
	bool InputInt(const char16_t* label,int* v);
	
	/**
		@brief 色を変更する。 
		@param label ラベル名 
		@param vs 色(RGB+A) 
	*/
	bool ColorEdit4(const char16_t* label,float* vs);
	
	/**
		@brief 選択可能な文字列を表示する。 
		@param label ラベル名 
		@param selected 選択されているか? 
	*/
	bool Selectable(const char16_t* label,bool selected);
	
	/**
		@brief リストボックスを表示する。 
		@param label ラベル名 
		@param current_item 選択されているアイテム 
		@param items アイテム(;区切り) 
	*/
	bool ListBox(const char16_t* label,int* current_item,const char16_t* items);
	
	/**
		@brief 画面上のメニューバーの表示を開始する。 
	*/
	bool BeginMainMenuBar();
	
	/**
		@brief 画面上のメニューバーの表示を終了する。 
	*/
	void EndMainMenuBar();
	
	/**
		@brief メニューバー(ウインドウ等)の表示を開始する。 
	*/
	bool BeginMenuBar();
	
	/**
		@brief メニューバーの表示を終了する。 
	*/
	void EndMenuBar();
	
	/**
		@brief メニューの表示を開始する。 
		@param label ラベル名 
	*/
	bool BeginMenu(const char16_t* label);
	
	/**
		@brief メニューの表示を終了する。 
	*/
	void EndMenu();
	
	/**
		@brief メニューアイテムを表示する。 
		@param label ラベル名 
		@param shortcut ショートカット 
		@param p_selected 選択されているか? 
	*/
	bool MenuItem(const char16_t* label,const char16_t* shortcut,bool* p_selected);
	
	/**
		@brief 行数を設定する。 
		@param count 行数 
	*/
	void Columns(int count);
	
	/**
		@brief 次の行に移動する。 
	*/
	void NextColumn();
	
	/**
		@brief 現在の行のインデックスを取得する。 
	*/
	int GetColumnIndex();
	
	/**
		@brief 行の幅を取得する。 
		@param column_index インデックス 
	*/
	float GetColumnWidth(int column_index);
	
	/**
		@brief 行の幅を設定する。 
		@param column_index インデックス 
		@param width 幅 
	*/
	void SetColumnWidth(int column_index,float width);
	
	/**
		@brief 現在選択されているアイテムにフォーカスを設定する。 
	*/
	void SetItemDefaultFocus();
	
	/**
		@brief ファイルを開くダイアログを開く。 
		@param filterList フィルタ 
		@param defaultPath 最初に表示するディレクトリのパス 
		@return 開くパス 
	*/
	const char16_t* OpenDialog(const char16_t* filterList,const char16_t* defaultPath);
	
	/**
		@brief ファイルを保存するダイアログを開く。 
		@param filterList フィルタ 
		@param defaultPath 最初に表示するディレクトリのパス 
		@return 保存するパス 
	*/
	const char16_t* SaveDialog(const char16_t* filterList,const char16_t* defaultPath);
	
	/**
		@brief フォルダを選択するダイアログを開く。 
		@param defaultPath 最初に表示するディレクトリのパス 
		@return フォルダのパス 
	*/
	const char16_t* PickFolder(const char16_t* defaultPath);
	
	/**
		@brief フォントを追加する。 
		@param filename フォントへのパス 
		@param size_pixels フォントサイズ 
	*/
	void AddFontFromFileTTF(const char16_t* filename,float size_pixels);
	
	/**
		@brief ダイアログを表示する。 
		@param message メッセージ 
		@param title タイトル 
		@param style ダイアログの種類 
		@param buttons ボタンの種類 
	*/
	ToolDialogSelection ShowDialog(const char16_t* message,const char16_t* title,ToolDialogStyle style,ToolDialogButtons buttons);
	
};


};

