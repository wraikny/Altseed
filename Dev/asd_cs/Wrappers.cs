using System;
namespace asd {
	/// <summary>
	/// 起動時に自動的に生成されるレイヤーの種類 
	///	</summary>
	public enum AutoGeneratedLayerType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Layer2D = asd.swig.AutoGeneratedLayerType.Layer2D,
		/// <summary>
		/// 
		/// </summary>
		Layer3D = asd.swig.AutoGeneratedLayerType.Layer3D,
		/// <summary>
		/// 
		/// </summary>
		Nothing = asd.swig.AutoGeneratedLayerType.Nothing,
	}

	/// <summary>
	/// レイヤーの種類 
	///	</summary>
	public enum LayerType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Layer2D = asd.swig.LayerType.Layer2D,
		/// <summary>
		/// 
		/// </summary>
		Layer3D = asd.swig.LayerType.Layer3D,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum WritingDirection : int
	{
		/// <summary>
		/// 
		/// </summary>
		Vertical = asd.swig.WritingDirection.Vertical,
		/// <summary>
		/// 
		/// </summary>
		Horizontal = asd.swig.WritingDirection.Horizontal,
	}

	/// <summary>
	/// フレームレートの制御方法 
	///	</summary>
	public enum FramerateMode : int
	{
		/// <summary>
		/// 固定フレームレート 
		/// </summary>
		Constant = asd.swig.FramerateMode.Constant,
		/// <summary>
		/// 可変フレームレート 
		/// </summary>
		Variable = asd.swig.FramerateMode.Variable,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureFormat : int
	{
		/// <summary>
		/// 
		/// </summary>
		R8G8B8A8_UNORM = asd.swig.TextureFormat.R8G8B8A8_UNORM,
		/// <summary>
		/// 
		/// </summary>
		R16G16B16A16_FLOAT = asd.swig.TextureFormat.R16G16B16A16_FLOAT,
		/// <summary>
		/// 
		/// </summary>
		R32G32B32A32_FLOAT = asd.swig.TextureFormat.R32G32B32A32_FLOAT,
		/// <summary>
		/// 
		/// </summary>
		R8G8B8A8_UNORM_SRGB = asd.swig.TextureFormat.R8G8B8A8_UNORM_SRGB,
		/// <summary>
		/// 
		/// </summary>
		R16G16_FLOAT = asd.swig.TextureFormat.R16G16_FLOAT,
		/// <summary>
		/// 
		/// </summary>
		R8_UNORM = asd.swig.TextureFormat.R8_UNORM,
		/// <summary>
		/// 
		/// </summary>
		BC1 = asd.swig.TextureFormat.BC1,
		/// <summary>
		/// 
		/// </summary>
		BC2 = asd.swig.TextureFormat.BC2,
		/// <summary>
		/// 
		/// </summary>
		BC3 = asd.swig.TextureFormat.BC3,
		/// <summary>
		/// 
		/// </summary>
		BC1_SRGB = asd.swig.TextureFormat.BC1_SRGB,
		/// <summary>
		/// 
		/// </summary>
		BC2_SRGB = asd.swig.TextureFormat.BC2_SRGB,
		/// <summary>
		/// 
		/// </summary>
		BC3_SRGB = asd.swig.TextureFormat.BC3_SRGB,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureClassType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Texture2D = asd.swig.TextureClassType.Texture2D,
		/// <summary>
		/// 
		/// </summary>
		RenderTexture2D = asd.swig.TextureClassType.RenderTexture2D,
		/// <summary>
		/// 
		/// </summary>
		CubemapTexture = asd.swig.TextureClassType.CubemapTexture,
		/// <summary>
		/// 
		/// </summary>
		DepthBuffer = asd.swig.TextureClassType.DepthBuffer,
	}

	/// <summary>
	/// 描画時のブレンドモードを表す列挙体 
	///	</summary>
	public enum AlphaBlendMode : int
	{
		/// <summary>
		/// 不透明 
		/// </summary>
		Opacity = asd.swig.AlphaBlendMode.Opacity,
		/// <summary>
		/// 透明 
		/// </summary>
		Blend = asd.swig.AlphaBlendMode.Blend,
		/// <summary>
		/// 加算 
		/// </summary>
		Add = asd.swig.AlphaBlendMode.Add,
		/// <summary>
		/// 減算 
		/// </summary>
		Sub = asd.swig.AlphaBlendMode.Sub,
		/// <summary>
		/// 乗算 
		/// </summary>
		Mul = asd.swig.AlphaBlendMode.Mul,
		/// <summary>
		/// 全加算(内部処理用) 
		/// </summary>
		AddAll = asd.swig.AlphaBlendMode.AddAll,
		/// <summary>
		/// 全不透明(内部処理用) 
		/// </summary>
		OpacityAll = asd.swig.AlphaBlendMode.OpacityAll,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureFilterType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Nearest = asd.swig.TextureFilterType.Nearest,
		/// <summary>
		/// 
		/// </summary>
		Linear = asd.swig.TextureFilterType.Linear,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum TextureWrapType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Repeat = asd.swig.TextureWrapType.Repeat,
		/// <summary>
		/// 
		/// </summary>
		Clamp = asd.swig.TextureWrapType.Clamp,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum CullingType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Front = asd.swig.CullingType.Front,
		/// <summary>
		/// 
		/// </summary>
		Back = asd.swig.CullingType.Back,
		/// <summary>
		/// 
		/// </summary>
		Double = asd.swig.CullingType.Double,
	}

	/// <summary>
	/// 描画方法 
	///	</summary>
	public enum GraphicsDeviceType : int
	{
		/// <summary>
		/// 実行環境で最も安定している描画方法(初期化時に使用) 
		/// </summary>
		Default = asd.swig.GraphicsDeviceType.Default,
		/// <summary>
		/// DirectX11. 
		/// </summary>
		DirectX11 = asd.swig.GraphicsDeviceType.DirectX11,
		/// <summary>
		/// OpenGL. 
		/// </summary>
		OpenGL = asd.swig.GraphicsDeviceType.OpenGL,
	}

	/// <summary>
	/// ウインドウ表示位置 
	///	</summary>
	public enum WindowPositionType : int
	{
		/// <summary>
		/// OSによる自動選択 
		/// </summary>
		Default = asd.swig.WindowPositionType.Default,
		/// <summary>
		/// プライマリモニタの中央 
		/// </summary>
		Centering = asd.swig.WindowPositionType.Centering,
	}

	/// <summary>
	/// カラースペース 
	///	</summary>
	public enum ColorSpaceType : int
	{
		/// <summary>
		/// ガンマスペース 
		/// </summary>
		GammaSpace = asd.swig.ColorSpaceType.GammaSpace,
		/// <summary>
		/// リニアスペース 
		/// </summary>
		LinearSpace = asd.swig.ColorSpaceType.LinearSpace,
	}

	/// <summary>
	/// イメージパッケージ内の要素の種類 
	///	</summary>
	public enum ImagePackageElementType : int
	{
		/// <summary>
		/// 画像 
		/// </summary>
		Image = asd.swig.ImagePackageElementType.Image,
		/// <summary>
		/// ボタン 
		/// </summary>
		Button = asd.swig.ImagePackageElementType.Button,
	}

	/// <summary>
	/// イメージパッケージ内の要素の種類(追加情報) 
	///	</summary>
	public enum ImagePackageAdditionalElementType : int
	{
		/// <summary>
		/// なし 
		/// </summary>
		None = asd.swig.ImagePackageAdditionalElementType.None,
		/// <summary>
		/// ボタンの時、通常状態で表示される 
		/// </summary>
		Normal = asd.swig.ImagePackageAdditionalElementType.Normal,
		/// <summary>
		/// ボタンの時、押されている状態で表示される 
		/// </summary>
		Pressed = asd.swig.ImagePackageAdditionalElementType.Pressed,
		/// <summary>
		/// ボタンの時、マウスが重なっている状態で表示される 
		/// </summary>
		Hovered = asd.swig.ImagePackageAdditionalElementType.Hovered,
	}

	/// <summary>
	/// ボタンの押し状態を示す列挙型 
	///	</summary>
	public enum ButtonState : int
	{
		/// <summary>
		/// ボタンをこのフレームで押した状態 
		/// </summary>
		Push = asd.swig.ButtonState.Push,
		/// <summary>
		/// ボタンをこのフレームで離した状態 
		/// </summary>
		Release = asd.swig.ButtonState.Release,
		/// <summary>
		/// ボタンを押し続けている状態 
		/// </summary>
		Hold = asd.swig.ButtonState.Hold,
		/// <summary>
		/// ボタンを離し続けている状態 
		/// </summary>
		Free = asd.swig.ButtonState.Free,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum Object2DType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = asd.swig.Object2DType.Unknown,
		/// <summary>
		/// 
		/// </summary>
		Texture = asd.swig.Object2DType.Texture,
		/// <summary>
		/// 
		/// </summary>
		Camera = asd.swig.Object2DType.Camera,
		/// <summary>
		/// 
		/// </summary>
		Effect = asd.swig.Object2DType.Effect,
		/// <summary>
		/// 
		/// </summary>
		Text = asd.swig.Object2DType.Text,
		/// <summary>
		/// 
		/// </summary>
		Map = asd.swig.Object2DType.Map,
		/// <summary>
		/// 
		/// </summary>
		Geometry = asd.swig.Object2DType.Geometry,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum RenderedObject3DType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = asd.swig.RenderedObject3DType.Unknown,
		/// <summary>
		/// 
		/// </summary>
		Mesh = asd.swig.RenderedObject3DType.Mesh,
		/// <summary>
		/// 
		/// </summary>
		Camera = asd.swig.RenderedObject3DType.Camera,
		/// <summary>
		/// 
		/// </summary>
		Effect = asd.swig.RenderedObject3DType.Effect,
		/// <summary>
		/// 
		/// </summary>
		DirectionalLight = asd.swig.RenderedObject3DType.DirectionalLight,
		/// <summary>
		/// 
		/// </summary>
		MassObject = asd.swig.RenderedObject3DType.MassObject,
		/// <summary>
		/// 
		/// </summary>
		Terrain = asd.swig.RenderedObject3DType.Terrain,
	}

	/// <summary>
	/// シェーダーに対して外部から設定可能なプロパティの変数の種類 
	///	</summary>
	public enum ShaderVariableType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = asd.swig.ShaderVariableType.Unknown,
		/// <summary>
		/// 
		/// </summary>
		Float = asd.swig.ShaderVariableType.Float,
		/// <summary>
		/// 
		/// </summary>
		Vector2DF = asd.swig.ShaderVariableType.Vector2DF,
		/// <summary>
		/// 
		/// </summary>
		Vector3DF = asd.swig.ShaderVariableType.Vector3DF,
		/// <summary>
		/// 
		/// </summary>
		Vector4DF = asd.swig.ShaderVariableType.Vector4DF,
		/// <summary>
		/// 
		/// </summary>
		Vector4DF_Array = asd.swig.ShaderVariableType.Vector4DF_Array,
		/// <summary>
		/// 
		/// </summary>
		Matrix44 = asd.swig.ShaderVariableType.Matrix44,
		/// <summary>
		/// 
		/// </summary>
		Matrix44_Array = asd.swig.ShaderVariableType.Matrix44_Array,
		/// <summary>
		/// 
		/// </summary>
		Texture2D = asd.swig.ShaderVariableType.Texture2D,
		/// <summary>
		/// 
		/// </summary>
		CubemapTexture = asd.swig.ShaderVariableType.CubemapTexture,
	}

	/// <summary>
	/// 3D描画時に表示されるバッファ 
	///	</summary>
	public enum VisualizedBufferType : int
	{
		/// <summary>
		/// 
		/// </summary>
		FinalImage = asd.swig.VisualizedBufferType.FinalImage,
		/// <summary>
		/// 
		/// </summary>
		DiffuseColor = asd.swig.VisualizedBufferType.DiffuseColor,
		/// <summary>
		/// 
		/// </summary>
		SpecularColor = asd.swig.VisualizedBufferType.SpecularColor,
		/// <summary>
		/// 
		/// </summary>
		Normal = asd.swig.VisualizedBufferType.Normal,
		/// <summary>
		/// 
		/// </summary>
		Smoothness = asd.swig.VisualizedBufferType.Smoothness,
		/// <summary>
		/// 
		/// </summary>
		Environment = asd.swig.VisualizedBufferType.Environment,
		/// <summary>
		/// 
		/// </summary>
		Occlusion = asd.swig.VisualizedBufferType.Occlusion,
	}

	/// <summary>
	/// 非同期読み込みの進捗 
	///	</summary>
	public enum LoadState : int
	{
		/// <summary>
		/// 
		/// </summary>
		Loading = asd.swig.LoadState.Loading,
		/// <summary>
		/// 
		/// </summary>
		WaitSync = asd.swig.LoadState.WaitSync,
		/// <summary>
		/// 
		/// </summary>
		Loaded = asd.swig.LoadState.Loaded,
		/// <summary>
		/// 
		/// </summary>
		Failed = asd.swig.LoadState.Failed,
	}

	/// <summary>
	/// ツールで表示するダイアログの種類 
	///	</summary>
	public enum ToolDialogStyle : int
	{
		/// <summary>
		/// 
		/// </summary>
		Info = asd.swig.ToolDialogStyle.Info,
		/// <summary>
		/// 
		/// </summary>
		Warning = asd.swig.ToolDialogStyle.Warning,
		/// <summary>
		/// 
		/// </summary>
		Error = asd.swig.ToolDialogStyle.Error,
		/// <summary>
		/// 
		/// </summary>
		Question = asd.swig.ToolDialogStyle.Question,
	}

	/// <summary>
	/// ツールで表示するダイアログのボタンの種類 
	///	</summary>
	public enum ToolDialogButtons : int
	{
		/// <summary>
		/// 
		/// </summary>
		OK = asd.swig.ToolDialogButtons.OK,
		/// <summary>
		/// 
		/// </summary>
		OKCancel = asd.swig.ToolDialogButtons.OKCancel,
		/// <summary>
		/// 
		/// </summary>
		YesNo = asd.swig.ToolDialogButtons.YesNo,
		/// <summary>
		/// 
		/// </summary>
		Quit = asd.swig.ToolDialogButtons.Quit,
	}

	/// <summary>
	/// ツールで表示するダイアログの結果 
	///	</summary>
	public enum ToolDialogSelection : int
	{
		/// <summary>
		/// 
		/// </summary>
		OK = asd.swig.ToolDialogSelection.OK,
		/// <summary>
		/// 
		/// </summary>
		Cancel = asd.swig.ToolDialogSelection.Cancel,
		/// <summary>
		/// 
		/// </summary>
		Yes = asd.swig.ToolDialogSelection.Yes,
		/// <summary>
		/// 
		/// </summary>
		No = asd.swig.ToolDialogSelection.No,
		/// <summary>
		/// 
		/// </summary>
		Quit = asd.swig.ToolDialogSelection.Quit,
		/// <summary>
		/// 
		/// </summary>
		None = asd.swig.ToolDialogSelection.None,
		/// <summary>
		/// 
		/// </summary>
		Error = asd.swig.ToolDialogSelection.Error,
	}

	/// <summary>
	/// 2Dコライダの形状タイプ 
	///	</summary>
	public enum Collider2DShapeType : int
	{
		/// <summary>
		/// 円形 
		/// </summary>
		Circle = asd.swig.Collider2DShapeType.Circle,
		/// <summary>
		/// 矩形 
		/// </summary>
		Rectangle = asd.swig.Collider2DShapeType.Rectangle,
		/// <summary>
		/// 線形 
		/// </summary>
		Line = asd.swig.Collider2DShapeType.Line,
		/// <summary>
		/// ポリゴン 
		/// </summary>
		Polygon = asd.swig.Collider2DShapeType.Polygon,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum CollisionType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Enter = asd.swig.CollisionType.Enter,
		/// <summary>
		/// 
		/// </summary>
		Stay = asd.swig.CollisionType.Stay,
		/// <summary>
		/// 
		/// </summary>
		Exit = asd.swig.CollisionType.Exit,
	}

	/// <summary>
	/// ジョイステイックの種類 
	///	</summary>
	public enum JoystickType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Other = asd.swig.JoystickType.Other,
		/// <summary>
		/// 
		/// </summary>
		PS4 = asd.swig.JoystickType.PS4,
		/// <summary>
		/// 
		/// </summary>
		XBOX360 = asd.swig.JoystickType.XBOX360,
	}

	/// <summary>
	/// ジョイステイックのボタンの種類 
	///	</summary>
	public enum JoystickButtonType : int
	{
		/// <summary>
		/// 
		/// </summary>
		Start = asd.swig.JoystickButtonType.Start,
		/// <summary>
		/// 
		/// </summary>
		Select = asd.swig.JoystickButtonType.Select,
		/// <summary>
		/// 
		/// </summary>
		LeftUp = asd.swig.JoystickButtonType.LeftUp,
		/// <summary>
		/// 
		/// </summary>
		LeftDown = asd.swig.JoystickButtonType.LeftDown,
		/// <summary>
		/// 
		/// </summary>
		LeftLeft = asd.swig.JoystickButtonType.LeftLeft,
		/// <summary>
		/// 
		/// </summary>
		LeftRight = asd.swig.JoystickButtonType.LeftRight,
		/// <summary>
		/// PSx Triangle. 
		/// </summary>
		RightUp = asd.swig.JoystickButtonType.RightUp,
		/// <summary>
		/// PSx Circle. 
		/// </summary>
		RightRight = asd.swig.JoystickButtonType.RightRight,
		/// <summary>
		/// PSx Square. 
		/// </summary>
		RightLeft = asd.swig.JoystickButtonType.RightLeft,
		/// <summary>
		/// PSx Cross. 
		/// </summary>
		RightDown = asd.swig.JoystickButtonType.RightDown,
		/// <summary>
		/// 
		/// </summary>
		L1 = asd.swig.JoystickButtonType.L1,
		/// <summary>
		/// 
		/// </summary>
		R1 = asd.swig.JoystickButtonType.R1,
		/// <summary>
		/// 
		/// </summary>
		L2 = asd.swig.JoystickButtonType.L2,
		/// <summary>
		/// 
		/// </summary>
		R2 = asd.swig.JoystickButtonType.R2,
		/// <summary>
		/// 
		/// </summary>
		L3 = asd.swig.JoystickButtonType.L3,
		/// <summary>
		/// 
		/// </summary>
		R3 = asd.swig.JoystickButtonType.R3,
		/// <summary>
		/// XBOX360 Start, PS4 Options. 
		/// </summary>
		LeftStart = asd.swig.JoystickButtonType.LeftStart,
		/// <summary>
		/// XBOX360 Select, PS4 TouchPad. 
		/// </summary>
		RightStart = asd.swig.JoystickButtonType.RightStart,
		/// <summary>
		/// 
		/// </summary>
		Max = asd.swig.JoystickButtonType.Max,
	}

	/// <summary>
	/// ジョイステイックの軸の種類 
	///	</summary>
	public enum JoystickAxisType : int
	{
		/// <summary>
		/// 
		/// </summary>
		LeftH = asd.swig.JoystickAxisType.LeftH,
		/// <summary>
		/// 
		/// </summary>
		LeftV = asd.swig.JoystickAxisType.LeftV,
		/// <summary>
		/// 
		/// </summary>
		RightH = asd.swig.JoystickAxisType.RightH,
		/// <summary>
		/// 
		/// </summary>
		RightV = asd.swig.JoystickAxisType.RightV,
		/// <summary>
		/// 
		/// </summary>
		L2 = asd.swig.JoystickAxisType.L2,
		/// <summary>
		/// 
		/// </summary>
		R2 = asd.swig.JoystickAxisType.R2,
		/// <summary>
		/// 
		/// </summary>
		Max = asd.swig.JoystickAxisType.Max,
	}

	/// <summary>
	/// Altseedで扱うキーボードのキー一覧 
	///	</summary>
	public enum Keys : int
	{
		/// <summary>
		/// 
		/// </summary>
		Unknown = asd.swig.Keys.Unknown,
		/// <summary>
		/// スペース 
		/// </summary>
		Space = asd.swig.Keys.Space,
		/// <summary>
		/// ： (US配列では ` ) 
		/// </summary>
		Apostrophe = asd.swig.Keys.Apostrophe,
		/// <summary>
		/// ， 
		/// </summary>
		Comma = asd.swig.Keys.Comma,
		/// <summary>
		/// － 
		/// </summary>
		Minus = asd.swig.Keys.Minus,
		/// <summary>
		/// ． 
		/// </summary>
		Period = asd.swig.Keys.Period,
		/// <summary>
		/// ／ 
		/// </summary>
		Slash = asd.swig.Keys.Slash,
		/// <summary>
		/// 0 
		/// </summary>
		Num0 = asd.swig.Keys.Num0,
		/// <summary>
		/// 1 
		/// </summary>
		Num1 = asd.swig.Keys.Num1,
		/// <summary>
		/// 2 
		/// </summary>
		Num2 = asd.swig.Keys.Num2,
		/// <summary>
		/// 3 
		/// </summary>
		Num3 = asd.swig.Keys.Num3,
		/// <summary>
		/// 4 
		/// </summary>
		Num4 = asd.swig.Keys.Num4,
		/// <summary>
		/// 5 
		/// </summary>
		Num5 = asd.swig.Keys.Num5,
		/// <summary>
		/// 6 
		/// </summary>
		Num6 = asd.swig.Keys.Num6,
		/// <summary>
		/// 7 
		/// </summary>
		Num7 = asd.swig.Keys.Num7,
		/// <summary>
		/// 8 
		/// </summary>
		Num8 = asd.swig.Keys.Num8,
		/// <summary>
		/// 9 
		/// </summary>
		Num9 = asd.swig.Keys.Num9,
		/// <summary>
		/// ； 
		/// </summary>
		Semicolon = asd.swig.Keys.Semicolon,
		/// <summary>
		/// ＾ (US配列では ＝ ) 
		/// </summary>
		Equal = asd.swig.Keys.Equal,
		/// <summary>
		/// A. 
		/// </summary>
		A = asd.swig.Keys.A,
		/// <summary>
		/// B. 
		/// </summary>
		B = asd.swig.Keys.B,
		/// <summary>
		/// C. 
		/// </summary>
		C = asd.swig.Keys.C,
		/// <summary>
		/// D. 
		/// </summary>
		D = asd.swig.Keys.D,
		/// <summary>
		/// E. 
		/// </summary>
		E = asd.swig.Keys.E,
		/// <summary>
		/// F. 
		/// </summary>
		F = asd.swig.Keys.F,
		/// <summary>
		/// G. 
		/// </summary>
		G = asd.swig.Keys.G,
		/// <summary>
		/// H. 
		/// </summary>
		H = asd.swig.Keys.H,
		/// <summary>
		/// I. 
		/// </summary>
		I = asd.swig.Keys.I,
		/// <summary>
		/// J. 
		/// </summary>
		J = asd.swig.Keys.J,
		/// <summary>
		/// K. 
		/// </summary>
		K = asd.swig.Keys.K,
		/// <summary>
		/// L. 
		/// </summary>
		L = asd.swig.Keys.L,
		/// <summary>
		/// M. 
		/// </summary>
		M = asd.swig.Keys.M,
		/// <summary>
		/// N. 
		/// </summary>
		N = asd.swig.Keys.N,
		/// <summary>
		/// O. 
		/// </summary>
		O = asd.swig.Keys.O,
		/// <summary>
		/// P. 
		/// </summary>
		P = asd.swig.Keys.P,
		/// <summary>
		/// Q. 
		/// </summary>
		Q = asd.swig.Keys.Q,
		/// <summary>
		/// R. 
		/// </summary>
		R = asd.swig.Keys.R,
		/// <summary>
		/// S. 
		/// </summary>
		S = asd.swig.Keys.S,
		/// <summary>
		/// T. 
		/// </summary>
		T = asd.swig.Keys.T,
		/// <summary>
		/// U. 
		/// </summary>
		U = asd.swig.Keys.U,
		/// <summary>
		/// V. 
		/// </summary>
		V = asd.swig.Keys.V,
		/// <summary>
		/// W. 
		/// </summary>
		W = asd.swig.Keys.W,
		/// <summary>
		/// X. 
		/// </summary>
		X = asd.swig.Keys.X,
		/// <summary>
		/// Y. 
		/// </summary>
		Y = asd.swig.Keys.Y,
		/// <summary>
		/// Z. 
		/// </summary>
		Z = asd.swig.Keys.Z,
		/// <summary>
		/// @ (US配列では ［ ) 
		/// </summary>
		LeftBracket = asd.swig.Keys.LeftBracket,
		/// <summary>
		/// ] (US配列では ＼ ) 
		/// </summary>
		Backslash = asd.swig.Keys.Backslash,
		/// <summary>
		/// [ (US配列では ］ ) 
		/// </summary>
		RightBracket = asd.swig.Keys.RightBracket,
		/// <summary>
		/// 半角/全角 
		/// </summary>
		GraveAccent = asd.swig.Keys.GraveAccent,
		/// <summary>
		/// 
		/// </summary>
		World1 = asd.swig.Keys.World1,
		/// <summary>
		/// 
		/// </summary>
		World2 = asd.swig.Keys.World2,
		/// <summary>
		/// Esc. 
		/// </summary>
		Escape = asd.swig.Keys.Escape,
		/// <summary>
		/// Enter. 
		/// </summary>
		Enter = asd.swig.Keys.Enter,
		/// <summary>
		/// Tab. 
		/// </summary>
		Tab = asd.swig.Keys.Tab,
		/// <summary>
		/// BackSpace. 
		/// </summary>
		Backspace = asd.swig.Keys.Backspace,
		/// <summary>
		/// Insert. 
		/// </summary>
		Insert = asd.swig.Keys.Insert,
		/// <summary>
		/// Delete. 
		/// </summary>
		Delete = asd.swig.Keys.Delete,
		/// <summary>
		/// → 
		/// </summary>
		Right = asd.swig.Keys.Right,
		/// <summary>
		/// ← 
		/// </summary>
		Left = asd.swig.Keys.Left,
		/// <summary>
		/// ↓ 
		/// </summary>
		Down = asd.swig.Keys.Down,
		/// <summary>
		/// ↑ 
		/// </summary>
		Up = asd.swig.Keys.Up,
		/// <summary>
		/// PageUp. 
		/// </summary>
		PageUp = asd.swig.Keys.PageUp,
		/// <summary>
		/// PageDown. 
		/// </summary>
		PageDown = asd.swig.Keys.PageDown,
		/// <summary>
		/// Home. 
		/// </summary>
		Home = asd.swig.Keys.Home,
		/// <summary>
		/// End. 
		/// </summary>
		End = asd.swig.Keys.End,
		/// <summary>
		/// CapsLock. 
		/// </summary>
		CapsLock = asd.swig.Keys.CapsLock,
		/// <summary>
		/// ScrollLock. 
		/// </summary>
		ScrollLock = asd.swig.Keys.ScrollLock,
		/// <summary>
		/// NumLock. 
		/// </summary>
		NumLock = asd.swig.Keys.NumLock,
		/// <summary>
		/// PrintScreen. 
		/// </summary>
		PrintScreen = asd.swig.Keys.PrintScreen,
		/// <summary>
		/// Pause. 
		/// </summary>
		Pause = asd.swig.Keys.Pause,
		/// <summary>
		/// F1. 
		/// </summary>
		F1 = asd.swig.Keys.F1,
		/// <summary>
		/// F2. 
		/// </summary>
		F2 = asd.swig.Keys.F2,
		/// <summary>
		/// F3. 
		/// </summary>
		F3 = asd.swig.Keys.F3,
		/// <summary>
		/// F4. 
		/// </summary>
		F4 = asd.swig.Keys.F4,
		/// <summary>
		/// F5. 
		/// </summary>
		F5 = asd.swig.Keys.F5,
		/// <summary>
		/// F6. 
		/// </summary>
		F6 = asd.swig.Keys.F6,
		/// <summary>
		/// F7. 
		/// </summary>
		F7 = asd.swig.Keys.F7,
		/// <summary>
		/// F8. 
		/// </summary>
		F8 = asd.swig.Keys.F8,
		/// <summary>
		/// F9. 
		/// </summary>
		F9 = asd.swig.Keys.F9,
		/// <summary>
		/// F10. 
		/// </summary>
		F10 = asd.swig.Keys.F10,
		/// <summary>
		/// F11. 
		/// </summary>
		F11 = asd.swig.Keys.F11,
		/// <summary>
		/// F12. 
		/// </summary>
		F12 = asd.swig.Keys.F12,
		/// <summary>
		/// F13. 
		/// </summary>
		F13 = asd.swig.Keys.F13,
		/// <summary>
		/// F14. 
		/// </summary>
		F14 = asd.swig.Keys.F14,
		/// <summary>
		/// F15. 
		/// </summary>
		F15 = asd.swig.Keys.F15,
		/// <summary>
		/// F16. 
		/// </summary>
		F16 = asd.swig.Keys.F16,
		/// <summary>
		/// F17. 
		/// </summary>
		F17 = asd.swig.Keys.F17,
		/// <summary>
		/// F18. 
		/// </summary>
		F18 = asd.swig.Keys.F18,
		/// <summary>
		/// F19. 
		/// </summary>
		F19 = asd.swig.Keys.F19,
		/// <summary>
		/// F20. 
		/// </summary>
		F20 = asd.swig.Keys.F20,
		/// <summary>
		/// F21. 
		/// </summary>
		F21 = asd.swig.Keys.F21,
		/// <summary>
		/// F22. 
		/// </summary>
		F22 = asd.swig.Keys.F22,
		/// <summary>
		/// F23. 
		/// </summary>
		F23 = asd.swig.Keys.F23,
		/// <summary>
		/// F24. 
		/// </summary>
		F24 = asd.swig.Keys.F24,
		/// <summary>
		/// F25. 
		/// </summary>
		F25 = asd.swig.Keys.F25,
		/// <summary>
		/// テンキーの0 
		/// </summary>
		Keypad0 = asd.swig.Keys.Keypad0,
		/// <summary>
		/// テンキーの1 
		/// </summary>
		Keypad1 = asd.swig.Keys.Keypad1,
		/// <summary>
		/// テンキーの2 
		/// </summary>
		Keypad2 = asd.swig.Keys.Keypad2,
		/// <summary>
		/// テンキーの3 
		/// </summary>
		Keypad3 = asd.swig.Keys.Keypad3,
		/// <summary>
		/// テンキーの4 
		/// </summary>
		Keypad4 = asd.swig.Keys.Keypad4,
		/// <summary>
		/// テンキーの5 
		/// </summary>
		Keypad5 = asd.swig.Keys.Keypad5,
		/// <summary>
		/// テンキーの6 
		/// </summary>
		Keypad6 = asd.swig.Keys.Keypad6,
		/// <summary>
		/// テンキーの7 
		/// </summary>
		Keypad7 = asd.swig.Keys.Keypad7,
		/// <summary>
		/// テンキーの8 
		/// </summary>
		Keypad8 = asd.swig.Keys.Keypad8,
		/// <summary>
		/// テンキーの9 
		/// </summary>
		Keypad9 = asd.swig.Keys.Keypad9,
		/// <summary>
		/// テンキーの． 
		/// </summary>
		KeypadDecimal = asd.swig.Keys.KeypadDecimal,
		/// <summary>
		/// テンキーの／ 
		/// </summary>
		KeypadDivide = asd.swig.Keys.KeypadDivide,
		/// <summary>
		/// テンキーの＊ 
		/// </summary>
		KeypadMultiply = asd.swig.Keys.KeypadMultiply,
		/// <summary>
		/// テンキーの－ 
		/// </summary>
		KeypadSubstract = asd.swig.Keys.KeypadSubstract,
		/// <summary>
		/// テンキーの＋ 
		/// </summary>
		KeypadAdd = asd.swig.Keys.KeypadAdd,
		/// <summary>
		/// テンキーのEnter 
		/// </summary>
		KeypadEnter = asd.swig.Keys.KeypadEnter,
		/// <summary>
		/// テンキーの＝ 
		/// </summary>
		KeypadEqual = asd.swig.Keys.KeypadEqual,
		/// <summary>
		/// 左Shift 
		/// </summary>
		LeftShift = asd.swig.Keys.LeftShift,
		/// <summary>
		/// 左Ctrl 
		/// </summary>
		LeftControl = asd.swig.Keys.LeftControl,
		/// <summary>
		/// 左Alt 
		/// </summary>
		LeftAlt = asd.swig.Keys.LeftAlt,
		/// <summary>
		/// 左Win 
		/// </summary>
		LeftWin = asd.swig.Keys.LeftWin,
		/// <summary>
		/// 右Shift 
		/// </summary>
		RightShift = asd.swig.Keys.RightShift,
		/// <summary>
		/// 右Ctrl 
		/// </summary>
		RightControl = asd.swig.Keys.RightControl,
		/// <summary>
		/// 右Alt 
		/// </summary>
		RightAlt = asd.swig.Keys.RightAlt,
		/// <summary>
		/// 右Win 
		/// </summary>
		RightWin = asd.swig.Keys.RightWin,
		/// <summary>
		/// コンテキストメニュー 
		/// </summary>
		Menu = asd.swig.Keys.Menu,
		/// <summary>
		/// 
		/// </summary>
		Last = asd.swig.Keys.Last,
		/// <summary>
		/// 
		/// </summary>
		MAX = asd.swig.Keys.MAX,
	}

	/// <summary>
	/// マウスのボタン一覧を示す列挙型 
	///	</summary>
	public enum MouseButtons : int
	{
		/// <summary>
		/// 左ボタン 
		/// </summary>
		ButtonLeft = asd.swig.MouseButtons.ButtonLeft,
		/// <summary>
		/// 右ボタン 
		/// </summary>
		ButtonRight = asd.swig.MouseButtons.ButtonRight,
		/// <summary>
		/// 中央ボタン 
		/// </summary>
		ButtonMiddle = asd.swig.MouseButtons.ButtonMiddle,
		/// <summary>
		/// サブボタン1 
		/// </summary>
		SubButton1 = asd.swig.MouseButtons.SubButton1,
		/// <summary>
		/// サブボタン2 
		/// </summary>
		SubButton2 = asd.swig.MouseButtons.SubButton2,
		/// <summary>
		/// サブボタン3 
		/// </summary>
		SubButton3 = asd.swig.MouseButtons.SubButton3,
		/// <summary>
		/// サブボタン4 
		/// </summary>
		SubButton4 = asd.swig.MouseButtons.SubButton4,
		/// <summary>
		/// サブボタン5 
		/// </summary>
		SubButton5 = asd.swig.MouseButtons.SubButton5,
	}

	/// <summary>
	/// 
	///	</summary>
	public enum LogLevel : int
	{
		/// <summary>
		/// 
		/// </summary>
		Error = asd.swig.LogLevel.Error,
		/// <summary>
		/// 
		/// </summary>
		Critical = asd.swig.LogLevel.Critical,
		/// <summary>
		/// 
		/// </summary>
		Warning = asd.swig.LogLevel.Warning,
		/// <summary>
		/// 
		/// </summary>
		Information = asd.swig.LogLevel.Information,
		/// <summary>
		/// 
		/// </summary>
		All = asd.swig.LogLevel.All,
	}

	/// <summary>
	/// オブジェクトの親子関係の同期方法を表す列挙体 
	///	</summary>
	public enum ChildTransformingMode : int
	{
		/// <summary>
		/// 位置のみを同期する。 
		/// </summary>
		Position = asd.swig.ChildTransformingMode.Position,
		/// <summary>
		/// 位置・角度・拡大率を同期する。 
		/// </summary>
		All = asd.swig.ChildTransformingMode.All,
		/// <summary>
		/// 同期を行わない。 
		/// </summary>
		Nothing = asd.swig.ChildTransformingMode.Nothing,
	}

	/// <summary>
	/// 図形の種類 
	///	</summary>
	public enum ShapeType : int
	{
		/// <summary>
		/// 円 
		/// </summary>
		CircleShape = asd.swig.ShapeType.CircleShape,
		/// <summary>
		/// 弧 
		/// </summary>
		ArcShape = asd.swig.ShapeType.ArcShape,
		/// <summary>
		/// 線分 
		/// </summary>
		LineShape = asd.swig.ShapeType.LineShape,
		/// <summary>
		/// 矩形 
		/// </summary>
		RectangleShape = asd.swig.ShapeType.RectangleShape,
		/// <summary>
		/// 三角形 
		/// </summary>
		TriangleShape = asd.swig.ShapeType.TriangleShape,
		/// <summary>
		/// 多角形 
		/// </summary>
		PolygonShape = asd.swig.ShapeType.PolygonShape,
	}

	/// <summary>
	/// 回転行列の計算順序 
	///	</summary>
	public enum RotationOrder : int
	{
		/// <summary>
		/// 
		/// </summary>
		QUATERNION = asd.swig.RotationOrder.QUATERNION,
		/// <summary>
		/// 
		/// </summary>
		XZY = asd.swig.RotationOrder.XZY,
		/// <summary>
		/// 
		/// </summary>
		XYZ = asd.swig.RotationOrder.XYZ,
		/// <summary>
		/// 
		/// </summary>
		ZXY = asd.swig.RotationOrder.ZXY,
		/// <summary>
		/// 
		/// </summary>
		ZYX = asd.swig.RotationOrder.ZYX,
		/// <summary>
		/// 
		/// </summary>
		YXZ = asd.swig.RotationOrder.YXZ,
		/// <summary>
		/// 
		/// </summary>
		YZX = asd.swig.RotationOrder.YZX,
		/// <summary>
		/// 
		/// </summary>
		AXIS = asd.swig.RotationOrder.AXIS,
	}

	/// <summary>
	/// キー間の補間方法 
	///	</summary>
	public enum InterpolationType : int
	{
		/// <summary>
		/// 次のキーまで定数で補間 
		/// </summary>
		Constant = asd.swig.InterpolationType.Constant,
		/// <summary>
		/// 次のキーまで線形で補間 
		/// </summary>
		Linear = asd.swig.InterpolationType.Linear,
		/// <summary>
		/// 次のキーまで三次方程式で補間 
		/// </summary>
		Cubic = asd.swig.InterpolationType.Cubic,
	}

	/// <summary>
	/// カーソルを表すクラス 
	/// </summary>
	public partial class Cursor
	{
		internal asd.swig.Cursor CoreInstance { get; set; }


	}


	/// <summary>
	/// エフェクトの情報が記録されているクラス 
	/// </summary>
	public partial class Effect
	{
		internal asd.swig.Effect CoreInstance { get; set; }


	}


	/// <summary>
	/// ファイルの操作に関する処理を提供するクラス 
	/// </summary>
	public partial class File
	{
		internal asd.swig.File CoreInstance { get; set; }


		/// <summary>
		/// ファイル操作する時のルートのディレクトリを追加する。 
		/// </summary>
		/// <param name="path">ルートのディレクトリのパス </param>
		public void AddRootDirectory(string path)
		{
			CoreInstance.AddRootDirectory(path);
		}

		/// <summary>
		/// ファイル操作する時のルートのパスワード付パッケージを追加する。 
		/// </summary>
		/// <param name="path">パッケージのパス </param>
		/// <param name="password">パスワード </param>
		public void AddRootPackageWithPassword(string path, string password)
		{
			CoreInstance.AddRootPackageWithPassword(path, password);
		}

		/// <summary>
		/// ファイル操作する時のルートのパッケージを追加する。 
		/// </summary>
		/// <param name="path">パッケージのパス </param>
		public void AddRootPackage(string path)
		{
			CoreInstance.AddRootPackage(path);
		}

		/// <summary>
		/// 追加されたパッケージを全て消去する。 
		/// </summary>
		public void ClearRootDirectories()
		{
			CoreInstance.ClearRootDirectories();
		}

		/// <summary>
		/// ファイルが存在するか取得する。 
		/// </summary>
		/// <param name="path">ファイルのパス </param>
		/// <returns>ファイルが存在するか? </returns>
		public bool Exists(string path)
		{
			return CoreInstance.Exists(path);
		}

	}


	/// <summary>
	/// フォントの情報が記録されているクラス 
	/// </summary>
	public partial class Font
	{
		internal asd.swig.Font CoreInstance { get; set; }


		/// <summary>
		/// 描画テキストと描画方向を与えると、その文字の描画領域を返す。 
		/// </summary>
		/// <param name="text">描画テキスト </param>
		/// <param name="writingDirection">描画方向 </param>
		/// <returns>文字の描画領域 </returns>
		public asd.Vector2DI CalcTextureSize(string text, WritingDirection writingDirection)
		{
			return CoreInstance.CalcTextureSize(text, (asd.swig.WritingDirection)writingDirection);
		}

		/// <summary>
		/// 指定した文字の代わりに画像を表示する組み合わせを追加する。 
		/// </summary>
		/// <param name="c">文字 </param>
		/// <param name="texture">画像 </param>
		public void AddImageGlyph(string c, Texture2D texture)
		{
			asd.swig.Texture2D textureCore = null;
			if(texture != null)
			{
				textureCore = texture.CoreInstance;
			}
			CoreInstance.AddImageGlyph(c, textureCore);
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class Graphics
	{
		internal asd.swig.Graphics_Imp CoreInstance { get; set; }

		/// <summary>
		/// 1フレーム間に実行された描画命令の回数を取得する。
		/// </summary>
		public int DrawCallCount
		{
			get { return CoreInstance.GetDrawCallCount(); }
		}

		/// <summary>
		/// 現在使用済みのVRAM容量を取得する。
		/// </summary>
		public int UsedVRAMSize
		{
			get { return CoreInstance.GetUsedVRAMSize(); }
		}


	}


	/// <summary>
	/// 複数の画像が格納されているクラス 
	/// </summary>
	public partial class ImagePackage
	{
		internal asd.swig.ImagePackage CoreInstance { get; set; }

		/// <summary>
		/// 格納されている画像の枚数を取得する。
		/// </summary>
		public int ImageCount
		{
			get { return CoreInstance.GetImageCount(); }
		}


		/// <summary>
		/// 格納されている画像の名称を取得する。 
		/// </summary>
		/// <param name="index">インデックス </param>
		/// <returns>名称 </returns>
		public string GetImageName(int index)
		{
			return CoreInstance.GetImageName(index);
		}

		/// <summary>
		/// 格納されている画像が配置される領域を取得する。 
		/// </summary>
		/// <param name="index">インデックス </param>
		/// <returns>領域 </returns>
		public asd.RectI GetImageArea(int index)
		{
			return CoreInstance.GetImageArea(index);
		}

		/// <summary>
		/// 格納されている画像の種類を取得する。 
		/// </summary>
		/// <param name="index">インデックス </param>
		/// <returns>画像の種類 </returns>
		public ImagePackageElementType GetElementType(int index)
		{
			return (asd.ImagePackageElementType)CoreInstance.GetElementType(index);
		}

		/// <summary>
		/// 格納されている画像の追加情報の種類を取得する。 
		/// </summary>
		/// <param name="index">インデックス </param>
		/// <returns>追加情報の種類 </returns>
		public ImagePackageAdditionalElementType GetAdditionalElementType(int index)
		{
			return (asd.ImagePackageAdditionalElementType)CoreInstance.GetAdditionalElementType(index);
		}

	}


	/// <summary>
	/// ジョイステイックのクラス 
	/// </summary>
	public partial class Joystick
	{
		internal asd.swig.Joystick CoreInstance { get; set; }

		/// <summary>
		/// ジョイスティックの名称を取得する。
		/// </summary>
		public string JoystickName
		{
			get { return CoreInstance.GetJoystickName(); }
		}

		/// <summary>
		/// ジョイスティックの種類を取得する。
		/// </summary>
		public JoystickType JoystickType
		{
			get { return (asd.JoystickType)CoreInstance.GetJoystickType(); }
		}

		/// <summary>
		/// 
		/// </summary>
		public int ButtonsCount
		{
			get { return CoreInstance.GetButtonsCount(); }
		}

		/// <summary>
		/// 
		/// </summary>
		public int AxesCount
		{
			get { return CoreInstance.GetAxesCount(); }
		}


		/// <summary>
		/// 指定したボタンの押し状態を返す 
		/// </summary>
		/// <param name="at">何番目のボタンの押し状態を取得するか </param>
		/// <returns>押し状態 </returns>
		public ButtonState GetButtonState(int at)
		{
			return (asd.ButtonState)CoreInstance.GetButtonState(at);
		}

		/// <summary>
		/// 特定のジョイステイックの場合(PS4)に指定したボタンの押し状態を取得する。 
		/// </summary>
		/// <param name="type">ボタンの種類 </param>
		/// <returns>押し状態 </returns>
		public ButtonState GetButtonStateAt(JoystickButtonType type)
		{
			return (asd.ButtonState)CoreInstance.GetButtonStateAt((asd.swig.JoystickButtonType)type);
		}

		/// <summary>
		/// 指定した軸の倒し具合を返す 
		/// </summary>
		/// <param name="at">何番目の軸配列の倒し具合を取得するか </param>
		/// <returns>倒し具合 </returns>
		public float GetAxisState(int at)
		{
			return CoreInstance.GetAxisState(at);
		}

		/// <summary>
		/// 特定のジョイステイックの場合(PS4)に指定した指定した軸の倒し具合を取得する。 
		/// </summary>
		/// <param name="type">軸の種類 </param>
		/// <returns>倒し具合 </returns>
		public float GetAxisStateAt(JoystickAxisType type)
		{
			return CoreInstance.GetAxisStateAt((asd.swig.JoystickAxisType)type);
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class JoystickContainer
	{
		internal asd.swig.JoystickContainer CoreInstance { get; set; }


		/// <summary>
		/// 引数に指定した番号のジョイスティックが接続されているかを取得する。 
		/// </summary>
		/// <param name="at">何番目のジョイスティックの接続を確認するか </param>
		/// <returns>接続されているか否か </returns>
		public bool GetIsPresentAt(int at)
		{
			return CoreInstance.GetIsPresentAt(at);
		}

		/// <summary>
		/// 全てのジョイスティックの接続状態を更新する。 
		/// </summary>
		public void RefreshAllJoysticks()
		{
			CoreInstance.RefreshAllJoysticks();
		}

	}


	/// <summary>
	/// キーボードからの入力を取得するクラス 
	/// </summary>
	public partial class Keyboard
	{
		internal asd.swig.Keyboard CoreInstance { get; set; }


		/// <summary>
		/// 特定のキーの押し状態をKeyState列挙型で返す 
		/// </summary>
		/// <param name="key"></param>
		/// <returns>押し状態 </returns>
		public ButtonState GetKeyState(Keys key)
		{
			return (asd.ButtonState)CoreInstance.GetKeyState((asd.swig.Keys)key);
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class Log
	{
		internal asd.swig.Log CoreInstance { get; set; }

		/// <summary>
		/// ログの出力が可能であるかどうかを表す真偽値を取得する。
		/// </summary>
		public bool IsValid
		{
			get { return CoreInstance.GetIsValid(); }
		}

		/// <summary>
		/// ログの出力レベルを設定する。
		/// </summary>
		public LogLevel OutputLevel
		{
			set { CoreInstance.SetOutputLevel((asd.swig.LogLevel)value); }
		}


		/// <summary>
		/// ログ ファイルへ文字列を書き込む。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		/// <param name="level">[in] ログの出力レベル </param>
		public void Write(string text, LogLevel level)
		{
			CoreInstance.Write(text, (asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへ文字列を書き込む。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		public void Write(string text)
		{
			CoreInstance.Write(text);
		}

		/// <summary>
		/// ログ ファイルへ文字列を書き込み、改行する。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		/// <param name="level">[in] ログの出力レベル </param>
		public void WriteLine(string text, LogLevel level)
		{
			CoreInstance.WriteLine(text, (asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへ文字列を書き込み、改行する。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		public void WriteLine(string text)
		{
			CoreInstance.WriteLine(text);
		}

		/// <summary>
		/// ログ ファイルへ強調された文字列を書き込む。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		/// <param name="level">[in] ログの出力レベル </param>
		public void WriteStrongly(string text, LogLevel level)
		{
			CoreInstance.WriteStrongly(text, (asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへ強調された文字列を書き込む。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		public void WriteStrongly(string text)
		{
			CoreInstance.WriteStrongly(text);
		}

		/// <summary>
		/// ログ ファイルへ強調された文字列を書き込み、改行する。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		/// <param name="level">[in] ログの出力レベル </param>
		public void WriteLineStrongly(string text, LogLevel level)
		{
			CoreInstance.WriteLineStrongly(text, (asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへ強調された文字列を書き込み、改行する。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		public void WriteLineStrongly(string text)
		{
			CoreInstance.WriteLineStrongly(text);
		}

		/// <summary>
		/// ログ ファイルへ見出しとして文字列を書き込む。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		/// <param name="level">[in] ログの出力レベル </param>
		public void WriteHeading(string text, LogLevel level)
		{
			CoreInstance.WriteHeading(text, (asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへ見出しとして文字列を書き込む。 
		/// </summary>
		/// <param name="text">[in] 書き込む文字列 </param>
		public void WriteHeading(string text)
		{
			CoreInstance.WriteHeading(text);
		}

		/// <summary>
		/// ログ ファイルへ水平線を書き込む。 
		/// </summary>
		/// <param name="level">[in] ログの出力レベル </param>
		public void WriteHorizontalRule(LogLevel level)
		{
			CoreInstance.WriteHorizontalRule((asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへ水平線を書き込む。 
		/// </summary>
		public void WriteHorizontalRule()
		{
			CoreInstance.WriteHorizontalRule();
		}

		/// <summary>
		/// ログ ファイルへ表形式( 
		/// </summary>
		/// <param name="level">[in] ログの出力レベル </param>
		public void BeginTable(LogLevel level)
		{
			CoreInstance.BeginTable((asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへ表形式( 
		/// </summary>
		public void BeginTable()
		{
			CoreInstance.BeginTable();
		}

		/// <summary>
		/// ログ ファイルへの表形式( 
		/// </summary>
		/// <param name="level">[in] ログの出力レベル </param>
		public void EndTable(LogLevel level)
		{
			CoreInstance.EndTable((asd.swig.LogLevel)level);
		}

		/// <summary>
		/// ログ ファイルへの表形式( 
		/// </summary>
		public void EndTable()
		{
			CoreInstance.EndTable();
		}

		/// <summary>
		/// 表形式での出力において、新しい行に移動する。 
		/// </summary>
		/// <param name="level">[in] ログの出力レベル </param>
		public void ChangeRow(LogLevel level)
		{
			CoreInstance.ChangeRow((asd.swig.LogLevel)level);
		}

		/// <summary>
		/// 表形式での出力において、新しい行に移動する。 
		/// </summary>
		public void ChangeRow()
		{
			CoreInstance.ChangeRow();
		}

		/// <summary>
		/// 表形式での出力において、新しい列に移動する。 
		/// </summary>
		/// <param name="level">[in] ログの出力レベル </param>
		public void ChangeColumn(LogLevel level)
		{
			CoreInstance.ChangeColumn((asd.swig.LogLevel)level);
		}

		/// <summary>
		/// 表形式での出力において、新しい列に移動する。 
		/// </summary>
		public void ChangeColumn()
		{
			CoreInstance.ChangeColumn();
		}

	}


	/// <summary>
	/// 大量描画が可能な3Dモデルクラス 
	/// </summary>
	public partial class MassModel
	{
		internal asd.swig.MassModel CoreInstance { get; set; }

		/// <summary>
		/// モデルが持つアニメーションの個数を取得する。
		/// </summary>
		public int AnimationCount
		{
			get { return CoreInstance.GetAnimationCount(); }
		}


		/// <summary>
		/// モデルが持つアニメーションの名称を取得する。 
		/// </summary>
		/// <param name="index">アニメーションのインデックス </param>
		/// <returns>アニメーションの名称 </returns>
		public string GetAnimationName(int index)
		{
			return CoreInstance.GetAnimationName(index);
		}

		/// <summary>
		/// モデルが持つアニメーションの長さ(60フレーム単位)を取得する。 
		/// </summary>
		/// <param name="name">アニメーション名 </param>
		/// <returns>アニメーションの長さ </returns>
		public float GetAnimationLength(string name)
		{
			return CoreInstance.GetAnimationLength(name);
		}

		/// <summary>
		/// アニメーションがループするかを取得する。 
		/// </summary>
		/// <param name="name">アニメーション名 </param>
		/// <returns>ループするか? </returns>
		public bool GetIsAnimationLoopingMode(string name)
		{
			return CoreInstance.GetIsAnimationLoopingMode(name);
		}

		/// <summary>
		/// アニメーションがループするかを設定する。 
		/// </summary>
		/// <param name="name">アニメーション名 </param>
		/// <param name="isLoopingMode"></param>
		public void SetIsAnimationLoopingMode(string name, bool isLoopingMode)
		{
			CoreInstance.SetIsAnimationLoopingMode(name, isLoopingMode);
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class Material2D
	{
		internal asd.swig.Material2D CoreInstance { get; set; }


		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public float GetFloat(string name)
		{
			return CoreInstance.GetFloat(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetFloat(string name, float value)
		{
			CoreInstance.SetFloat(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public asd.Vector2DF GetVector2DF(string name)
		{
			return CoreInstance.GetVector2DF(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetVector2DF(string name, asd.Vector2DF value)
		{
			CoreInstance.SetVector2DF(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public asd.Vector3DF GetVector3DF(string name)
		{
			return CoreInstance.GetVector3DF(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetVector3DF(string name, asd.Vector3DF value)
		{
			CoreInstance.SetVector3DF(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public asd.Vector4DF GetVector4DF(string name)
		{
			return CoreInstance.GetVector4DF(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetVector4DF(string name, asd.Vector4DF value)
		{
			CoreInstance.SetVector4DF(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetTexture2D(string name, Texture2D value)
		{
			asd.swig.Texture2D valueCore = null;
			if(value != null)
			{
				valueCore = value.CoreInstance;
			}
			CoreInstance.SetTexture2D(name, valueCore);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public TextureFilterType GetTextureFilterType(string name)
		{
			return (asd.TextureFilterType)CoreInstance.GetTextureFilterType(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="filter"></param>
		public void SetTextureFilterType(string name, TextureFilterType filter)
		{
			CoreInstance.SetTextureFilterType(name, (asd.swig.TextureFilterType)filter);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public TextureWrapType GetTextureWrapType(string name)
		{
			return (asd.TextureWrapType)CoreInstance.GetTextureWrapType(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="wrap"></param>
		public void SetTextureWrapType(string name, TextureWrapType wrap)
		{
			CoreInstance.SetTextureWrapType(name, (asd.swig.TextureWrapType)wrap);
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class Material3D
	{
		internal asd.swig.Material3D CoreInstance { get; set; }


		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public float GetFloat(string name)
		{
			return CoreInstance.GetFloat(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetFloat(string name, float value)
		{
			CoreInstance.SetFloat(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public asd.Vector2DF GetVector2DF(string name)
		{
			return CoreInstance.GetVector2DF(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetVector2DF(string name, asd.Vector2DF value)
		{
			CoreInstance.SetVector2DF(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public asd.Vector3DF GetVector3DF(string name)
		{
			return CoreInstance.GetVector3DF(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetVector3DF(string name, asd.Vector3DF value)
		{
			CoreInstance.SetVector3DF(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public asd.Vector4DF GetVector4DF(string name)
		{
			return CoreInstance.GetVector4DF(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetVector4DF(string name, asd.Vector4DF value)
		{
			CoreInstance.SetVector4DF(name, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public void SetTexture2D(string name, Texture2D value)
		{
			asd.swig.Texture2D valueCore = null;
			if(value != null)
			{
				valueCore = value.CoreInstance;
			}
			CoreInstance.SetTexture2D(name, valueCore);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public TextureFilterType GetTextureFilterType(string name)
		{
			return (asd.TextureFilterType)CoreInstance.GetTextureFilterType(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="filter"></param>
		public void SetTextureFilterType(string name, TextureFilterType filter)
		{
			CoreInstance.SetTextureFilterType(name, (asd.swig.TextureFilterType)filter);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public TextureWrapType GetTextureWrapType(string name)
		{
			return (asd.TextureWrapType)CoreInstance.GetTextureWrapType(name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="wrap"></param>
		public void SetTextureWrapType(string name, TextureWrapType wrap)
		{
			CoreInstance.SetTextureWrapType(name, (asd.swig.TextureWrapType)wrap);
		}

	}


	/// <summary>
	/// 映像ファイルを再生するためのクラス 
	/// </summary>
	public partial class MediaPlayer
	{
		internal asd.swig.MediaPlayer CoreInstance { get; set; }

		/// <summary>
		/// 読み込んだ映像の大きさを取得する。
		/// </summary>
		public asd.Vector2DI Size
		{
			get { return CoreInstance.GetSize(); }
		}

		/// <summary>
		/// 現在再生中の映像のフレーム番号を取得する。
		/// </summary>
		public int CurrentFrame
		{
			get { return CoreInstance.GetCurrentFrame(); }
		}


		/// <summary>
		/// 映像を再生する。 
		/// </summary>
		/// <param name="isLoopingMode">ループ再生するか? </param>
		/// <returns></returns>
		public bool Play(bool isLoopingMode)
		{
			return CoreInstance.Play(isLoopingMode);
		}

		/// <summary>
		/// 映像を読み込む。 
		/// </summary>
		/// <param name="path">ファイルのパス </param>
		/// <returns></returns>
		/// <remarks>
		/// H264を推奨する。 
		/// </remarks>
		public bool Load(string path)
		{
			return CoreInstance.Load(path);
		}

		/// <summary>
		/// 現在の映像をテクスチャに書き込む。 
		/// </summary>
		/// <param name="target">書き込み先 </param>
		/// <returns></returns>
		/// <remarks>
		/// 映像とテクスチャの解像度は等しい必要がある。 
		/// </remarks>
		public bool WriteToTexture2D(Texture2D target)
		{
			asd.swig.Texture2D targetCore = null;
			if(target != null)
			{
				targetCore = target.CoreInstance;
			}
			return CoreInstance.WriteToTexture2D(targetCore);
		}

	}


	/// <summary>
	/// 3Dメッシュのクラス 
	/// </summary>
	public partial class Mesh
	{
		internal asd.swig.Mesh CoreInstance { get; set; }


		/// <summary>
		/// 頂点を追加する。 
		/// </summary>
		/// <param name="position">座標 </param>
		/// <param name="normal">法線 </param>
		/// <param name="binormal">従法線 </param>
		/// <param name="uv1">UV1 </param>
		/// <param name="uv2">UV2 </param>
		/// <param name="color">頂点色 </param>
		/// <param name="boneWeights">ボーンのウエイト </param>
		/// <param name="boneIndexes">ボーンのインデックス </param>
		public void AddVertex(asd.Vector3DF position, asd.Vector3DF normal, asd.Vector3DF binormal, asd.Vector2DF uv1, asd.Vector2DF uv2, asd.Color color, int boneWeights, int boneIndexes)
		{
			CoreInstance.AddVertex(ref position, ref normal, ref binormal, ref uv1, ref uv2, ref color, boneWeights, boneIndexes);
		}

		/// <summary>
		/// 面を追加する。 
		/// </summary>
		/// <param name="index1">頂点インデックス1 </param>
		/// <param name="index2">頂点インデックス2 </param>
		/// <param name="index3">頂点インデックス3 </param>
		/// <param name="materialIndex">材質インデックス </param>
		public void AddFace(int index1, int index2, int index3, int materialIndex)
		{
			CoreInstance.AddFace(index1, index2, index3, materialIndex);
		}

		/// <summary>
		/// ボーンとの接続設定を追加する。 
		/// </summary>
		/// <param name="targetIndex">対象ボーンインデックス </param>
		/// <param name="boneToMesh">ボーンの行列をメッシュの行列に変換する行列 </param>
		public void AddBoneConnector(int targetIndex, asd.Matrix44 boneToMesh)
		{
			CoreInstance.AddBoneConnector(targetIndex, ref boneToMesh);
		}

		/// <summary>
		/// 材質を追加する。 
		/// </summary>
		/// <returns>材質のインデックス </returns>
		public int AddMaterial()
		{
			return CoreInstance.AddMaterial();
		}

		/// <summary>
		/// 設定した値をGPUに送信する。 
		/// </summary>
		public void SendToGPUMemory()
		{
			CoreInstance.SendToGPUMemory();
		}

		/// <summary>
		/// 内部シェーダーを使用する場合のカラーテクスチャを設定する。 
		/// </summary>
		/// <param name="materialIndex">材質のインデックス </param>
		/// <param name="texture"></param>
		/// <remarks>
		/// AddMaterialCountを実行した後でないと無効になる。 
		/// </remarks>
		public void SetColorTexture(int materialIndex, Texture2D texture)
		{
			asd.swig.Texture2D textureCore = null;
			if(texture != null)
			{
				textureCore = texture.CoreInstance;
			}
			CoreInstance.SetColorTexture(materialIndex, textureCore);
		}

		/// <summary>
		/// 内部シェーダーを使用する場合の法線テクスチャを設定する。 
		/// </summary>
		/// <param name="materialIndex">材質のインデックス </param>
		/// <param name="texture"></param>
		/// <remarks>
		/// AddMaterialCountを実行した後でないと無効になる。 
		/// </remarks>
		public void SetNormalTexture(int materialIndex, Texture2D texture)
		{
			asd.swig.Texture2D textureCore = null;
			if(texture != null)
			{
				textureCore = texture.CoreInstance;
			}
			CoreInstance.SetNormalTexture(materialIndex, textureCore);
		}

		/// <summary>
		/// 内部シェーダーを使用する場合の金属度テクスチャを設定する。 
		/// </summary>
		/// <param name="materialIndex">材質のインデックス </param>
		/// <param name="texture"></param>
		/// <remarks>
		/// AddMaterialCountを実行した後でないと無効になる。 
		/// </remarks>
		public void SetMetalnessTexture(int materialIndex, Texture2D texture)
		{
			asd.swig.Texture2D textureCore = null;
			if(texture != null)
			{
				textureCore = texture.CoreInstance;
			}
			CoreInstance.SetMetalnessTexture(materialIndex, textureCore);
		}

		/// <summary>
		/// 内部シェーダーを使用する場合の面平滑度テクスチャを設定する。 
		/// </summary>
		/// <param name="materialIndex">材質のインデックス </param>
		/// <param name="texture"></param>
		/// <remarks>
		/// AddMaterialCountを実行した後でないと無効になる。 
		/// </remarks>
		public void SetSmoothnessTexture(int materialIndex, Texture2D texture)
		{
			asd.swig.Texture2D textureCore = null;
			if(texture != null)
			{
				textureCore = texture.CoreInstance;
			}
			CoreInstance.SetSmoothnessTexture(materialIndex, textureCore);
		}

	}


	/// <summary>
	/// 3Dモデルクラス 
	/// </summary>
	public partial class Model
	{
		internal asd.swig.Model CoreInstance { get; set; }

		/// <summary>
		/// モデルが持つメッシュの個数を取得する。
		/// </summary>
		public int MeshCount
		{
			get { return CoreInstance.GetMeshCount(); }
		}

		/// <summary>
		/// モデルが持つアニメーションクリップの個数を取得する。
		/// </summary>
		public int AnimationClipCount
		{
			get { return CoreInstance.GetAnimationClipCount(); }
		}


		/// <summary>
		/// モデルが持つアニメーションクリップの名称を取得する。 
		/// </summary>
		/// <param name="index">アニメーションクリップのインデックス </param>
		/// <returns>アニメーションクリップの名称 </returns>
		public string GetAnimationClipName(int index)
		{
			return CoreInstance.GetAnimationClipName(index);
		}

	}


	/// <summary>
	/// マウスからの入力を取得するクラス 
	/// </summary>
	public partial class Mouse
	{
		internal asd.swig.Mouse CoreInstance { get; set; }

		/// <summary>
		/// マウスポインタの位置を取得または設定する。
		/// </summary>
		public asd.Vector2DF Position
		{
			get { return CoreInstance.GetPosition(); }
			set { CoreInstance.SetPosition(value); }
		}

		/// <summary>
		/// ホイールの回転度合いを取得する。
		/// </summary>
		public float Wheel
		{
			get { return CoreInstance.GetWheel(); }
		}


		/// <summary>
		/// 指定したボタンの入力状態を取得を取得する。 
		/// </summary>
		/// <param name="mouseButton"></param>
		/// <returns></returns>
		public ButtonState GetButtonInputState(MouseButtons mouseButton)
		{
			return (asd.ButtonState)CoreInstance.GetButtonInputState((asd.swig.MouseButtons)mouseButton);
		}

	}


	/// <summary>
	/// プログラムの実行状況(計算時間や、使っているプロセッサ)を記録するクラス。 
	/// </summary>
	public partial class Profiler
	{
		internal asd.swig.Profiler CoreInstance { get; set; }


		/// <summary>
		/// 計算の開始時間と、使用するプロセッサ番号を記録する。 
		/// </summary>
		/// <param name="id">プロファイリングを識別するID。Start関数は、IDの一致するEnd関数と対応する。 </param>
		public void Start(int id)
		{
			CoreInstance.Start(id);
		}

		/// <summary>
		/// 計算の終了時間を記録し、プロファイリング結果を蓄積する。 
		/// </summary>
		/// <param name="id">プロファイリングを識別するID。End関数は、IDの一致するStart関数と対応する。 </param>
		public void End(int id)
		{
			CoreInstance.End(id);
		}

	}


	/// <summary>
	/// シェーダー(2D) 
	/// </summary>
	public partial class Shader2D
	{
		internal asd.swig.Shader2D CoreInstance { get; set; }


	}


	/// <summary>
	/// シェーダー(3D) 
	/// </summary>
	public partial class Shader3D
	{
		internal asd.swig.Shader3D CoreInstance { get; set; }


	}


	/// <summary>
	/// 音を管理するクラス 
	/// </summary>
	public partial class Sound
	{
		internal asd.swig.Sound CoreInstance { get; set; }


		/// <summary>
		/// 音を再生する。 
		/// </summary>
		/// <param name="soundSource">音源 </param>
		/// <returns>ID </returns>
		public int Play(SoundSource soundSource)
		{
			asd.swig.SoundSource soundSourceCore = null;
			if(soundSource != null)
			{
				soundSourceCore = soundSource.CoreInstance;
			}
			return CoreInstance.Play(soundSourceCore);
		}

		/// <summary>
		/// 音が再生中か、取得する。 
		/// </summary>
		/// <param name="id">ID </param>
		/// <returns>再生中か? </returns>
		public bool GetIsPlaying(int id)
		{
			return CoreInstance.GetIsPlaying(id);
		}

		/// <summary>
		/// 全ての再生中の音を停止する。 
		/// </summary>
		public void StopAll()
		{
			CoreInstance.StopAll();
		}

		/// <summary>
		/// 指定した音を停止する。 
		/// </summary>
		/// <param name="id">ID </param>
		public void Stop(int id)
		{
			CoreInstance.Stop(id);
		}

		/// <summary>
		/// 指定した音を一時停止する。 
		/// </summary>
		/// <param name="id">ID </param>
		public void Pause(int id)
		{
			CoreInstance.Pause(id);
		}

		/// <summary>
		/// 指定した一時停止中の音の一時停止を解除する。 
		/// </summary>
		/// <param name="id">ID </param>
		public void Resume(int id)
		{
			CoreInstance.Resume(id);
		}

		/// <summary>
		/// 指定した音の音量を設定する。 
		/// </summary>
		/// <param name="id">ID </param>
		/// <param name="volume">音量(0.0～1.0) </param>
		public void SetVolume(int id, float volume)
		{
			CoreInstance.SetVolume(id, volume);
		}

		/// <summary>
		/// 指定した音をフェードインさせる。 
		/// </summary>
		/// <param name="id">ID </param>
		/// <param name="second">フェードインに使用する時間(秒) </param>
		public void FadeIn(int id, float second)
		{
			CoreInstance.FadeIn(id, second);
		}

		/// <summary>
		/// 指定した音をフェードアウトさせる。 
		/// </summary>
		/// <param name="id">ID </param>
		/// <param name="second">フェードアウトに使用する時間(秒) </param>
		public void FadeOut(int id, float second)
		{
			CoreInstance.FadeOut(id, second);
		}

		/// <summary>
		/// 任意の音量に音量を一定時間かけて変更する。 
		/// </summary>
		/// <param name="id">音のID </param>
		/// <param name="second">変更にかかる時間(秒) </param>
		/// <param name="targetedVolume">変更先の音量(0.0～1.0) </param>
		/// <remarks>
		/// この指定される音量はSetVolumeに指定される音量とは異なり、FadeIn、FadeOutに使用される音量と共通である。 つまり、このメソッドはFadeIn、FadeOutの任意音量指定版と言える。 
		/// </remarks>
		public void Fade(int id, float second, float targetedVolume)
		{
			CoreInstance.Fade(id, second, targetedVolume);
		}

		/// <summary>
		/// 再生速度変更するかを取得する。 
		/// </summary>
		/// <param name="id">音のID </param>
		/// <returns>再生速度変更するか? </returns>
		public bool GetIsPlaybackSpeedEnabled(int id)
		{
			return CoreInstance.GetIsPlaybackSpeedEnabled(id);
		}

		/// <summary>
		/// 再生速度変更するかを設定する。 
		/// </summary>
		/// <param name="id">音のID </param>
		/// <param name="isPlaybackSpeedEnabled">再生速度変更するか? </param>
		public void SetIsPlaybackSpeedEnabled(int id, bool isPlaybackSpeedEnabled)
		{
			CoreInstance.SetIsPlaybackSpeedEnabled(id, isPlaybackSpeedEnabled);
		}

		/// <summary>
		/// 再生速度を取得する。 
		/// </summary>
		/// <param name="id">音のID </param>
		/// <returns>再生速度(比率) </returns>
		/// <remarks>
		/// 設定値は再生速度に比例する。1.0で等速。範囲は0.25から4.0。 音程は再生速度に比例して変化する。 
		/// </remarks>
		public float GetPlaybackSpeed(int id)
		{
			return CoreInstance.GetPlaybackSpeed(id);
		}

		/// <summary>
		/// 再生速度を設定する。 
		/// </summary>
		/// <param name="id">音のID </param>
		/// <param name="playbackSpeed">再生速度(比率) </param>
		/// <remarks>
		/// 設定値は再生速度に比例する。1.0で等速。範囲は0.25から4.0。 音程は再生速度に比例して変化する。 
		/// </remarks>
		public void SetPlaybackSpeed(int id, float playbackSpeed)
		{
			CoreInstance.SetPlaybackSpeed(id, playbackSpeed);
		}

		/// <summary>
		/// パン位置を取得する。 
		/// </summary>
		/// <param name="id">音のID </param>
		/// <returns>パン位置, 0.0で中央, -1.0で左, 1.0で右。 </returns>
		public float GetPanningPosition(int id)
		{
			return CoreInstance.GetPanningPosition(id);
		}

		/// <summary>
		/// パン位置を設定する。 
		/// </summary>
		/// <param name="id">音のID </param>
		/// <param name="panningPosition">パン位置, 0.0で中央, -1.0で左, 1.0で右。 </param>
		public void SetPanningPosition(int id, float panningPosition)
		{
			CoreInstance.SetPanningPosition(id, panningPosition);
		}

	}


	/// <summary>
	/// 音源のクラス 
	/// </summary>
	public partial class SoundSource
	{
		internal asd.swig.SoundSource CoreInstance { get; set; }

		/// <summary>
		/// ループポイントの開始地点(秒)を取得または設定する。
		/// </summary>
		public float LoopStartingPoint
		{
			get { return CoreInstance.GetLoopStartingPoint(); }
			set { CoreInstance.SetLoopStartingPoint(value); }
		}

		/// <summary>
		/// ループポイントの終了地点(秒)を取得または設定する。
		/// </summary>
		public float LoopEndPoint
		{
			get { return CoreInstance.GetLoopEndPoint(); }
			set { CoreInstance.SetLoopEndPoint(value); }
		}

		/// <summary>
		/// ループするかを取得または設定する。
		/// </summary>
		public bool IsLoopingMode
		{
			get { return CoreInstance.GetIsLoopingMode(); }
			set { CoreInstance.SetIsLoopingMode(value); }
		}

		/// <summary>
		/// 音の長さを取得する。
		/// </summary>
		public float Length
		{
			get { return CoreInstance.GetLength(); }
		}


	}


	/// <summary>
	/// 一括してファイルを読み込むクラス 
	/// </summary>
	public partial class StaticFile
	{
		internal asd.swig.StaticFile CoreInstance { get; set; }

		/// <summary>
		/// ファイルのパスを取得する。
		/// </summary>
		public string FullPath
		{
			get { return CoreInstance.GetFullPath(); }
		}

		/// <summary>
		/// 読み込まれたバッファの先頭のポインタを取得する。
		/// </summary>
		public System.IntPtr Data
		{
			get { return CoreInstance.GetData(); }
		}

		/// <summary>
		/// 読み込まれたバッファのサイズを取得する。
		/// </summary>
		public int Size
		{
			get { return CoreInstance.GetSize(); }
		}

		/// <summary>
		/// パッケージ内からファイルが読み込まれているかを取得する。
		/// </summary>
		public bool IsInPackage
		{
			get { return CoreInstance.GetIsInPackage(); }
		}

		/// <summary>
		/// ファイルの非同期読み込みの進捗を取得する。
		/// </summary>
		public LoadState LoadState
		{
			get { return (asd.LoadState)CoreInstance.GetLoadState(); }
		}


	}


	/// <summary>
	/// 部分的にファイルを読み込むクラス 
	/// </summary>
	public partial class StreamFile
	{
		internal asd.swig.StreamFile CoreInstance { get; set; }

		/// <summary>
		/// ファイルのサイズを取得する。
		/// </summary>
		public int Size
		{
			get { return CoreInstance.GetSize(); }
		}

		/// <summary>
		/// ファイル内で現在読み込んでいる位置を取得する。
		/// </summary>
		public int CurrentPosition
		{
			get { return CoreInstance.GetCurrentPosition(); }
		}

		/// <summary>
		/// 読み込まれた一時的なバッファの先頭のポインタを取得する。
		/// </summary>
		public System.IntPtr TempBuffer
		{
			get { return CoreInstance.GetTempBuffer(); }
		}

		/// <summary>
		/// 読み込まれた一時的なバッファのサイズを取得する。
		/// </summary>
		public int TempBufferSize
		{
			get { return CoreInstance.GetTempBufferSize(); }
		}


		/// <summary>
		/// ファイルからデータを読み込み、一時的なバッファに格納する。 
		/// </summary>
		/// <param name="size">読み込むサイズ </param>
		/// <returns>読み込んだサイズ </returns>
		public int Read(int size)
		{
			return CoreInstance.Read(size);
		}

	}


	/// <summary>
	/// 地形のクラス 
	/// </summary>
	public partial class Terrain3D
	{
		internal asd.swig.Terrain3D CoreInstance { get; set; }


		/// <summary>
		/// マップに対する変更を適用してメッシュを生成する。 
		/// </summary>
		/// <returns></returns>
		public bool Commit()
		{
			return CoreInstance.Commit();
		}

		/// <summary>
		/// 編集可能な情報を破棄して固定化する。 
		/// </summary>
		public void Fix()
		{
			CoreInstance.Fix();
		}

		/// <summary>
		/// 衝突判定を削除する。 
		/// </summary>
		public void ClearCollisions()
		{
			CoreInstance.ClearCollisions();
		}

		/// <summary>
		/// 新規に地形を作成する。 
		/// </summary>
		/// <param name="gridSize">グリッド1つ当たりの大きさ </param>
		/// <param name="gridWidthCount">横方向のグリッド数 </param>
		/// <param name="gridHeightCount">縦方向のグリッド数 </param>
		public void New(float gridSize, int gridWidthCount, int gridHeightCount)
		{
			CoreInstance.New(gridSize, gridWidthCount, gridHeightCount);
		}

		/// <summary>
		/// 素材を追加する。 
		/// </summary>
		/// <param name="name">素材名 </param>
		/// <param name="size">素材のテクスチャ1枚あたりの大きさ </param>
		/// <param name="color">色テクスチャのパス </param>
		/// <param name="normal">法線テクスチャのパス </param>
		/// <param name="metalness">スペキュラテクスチャのパス </param>
		public void AddSurface(string name, float size, string color, string normal, string metalness)
		{
			CoreInstance.AddSurface(name, size, color, normal, metalness);
		}

		/// <summary>
		/// 素材インデックスを取得する。 
		/// </summary>
		/// <param name="name">素材名 </param>
		/// <returns>素材インデックス </returns>
		public int GetSurfaceIndex(string name)
		{
			return CoreInstance.GetSurfaceIndex(name);
		}

		/// <summary>
		/// 崖のテクスチャを設定する。 
		/// </summary>
		/// <param name="diffuseTexture">色テクスチャ </param>
		/// <param name="normalTexture">法線テクスチャ </param>
		/// <param name="metalnessTexture">金属度テクスチャ </param>
		public void SetCliffTexture(Texture2D diffuseTexture, Texture2D normalTexture, Texture2D metalnessTexture)
		{
			asd.swig.Texture2D diffuseTextureCore = null;
			if(diffuseTexture != null)
			{
				diffuseTextureCore = diffuseTexture.CoreInstance;
			}
			asd.swig.Texture2D normalTextureCore = null;
			if(normalTexture != null)
			{
				normalTextureCore = normalTexture.CoreInstance;
			}
			asd.swig.Texture2D metalnessTextureCore = null;
			if(metalnessTexture != null)
			{
				metalnessTextureCore = metalnessTexture.CoreInstance;
			}
			CoreInstance.SetCliffTexture(diffuseTextureCore, normalTextureCore, metalnessTextureCore);
		}

		/// <summary>
		/// 素材を円形に割り当てる。 
		/// </summary>
		/// <param name="surfaceIndex">素材インデックス </param>
		/// <param name="x">円形の中心座標 </param>
		/// <param name="y">円形の中心座標 </param>
		/// <param name="radius">円形の半径 </param>
		/// <param name="value">割り当てる値(-255～255) </param>
		/// <param name="fallout">周囲のぼかし(0～1) </param>
		public void AssignSurfaceWithCircle(int surfaceIndex, float x, float y, float radius, float value, float fallout)
		{
			CoreInstance.AssignSurfaceWithCircle(surfaceIndex, x, y, radius, value, fallout);
		}

		/// <summary>
		/// 円形に地形を上下させる。 
		/// </summary>
		/// <param name="x">円形の中心座標 </param>
		/// <param name="y">円形の中心座標 </param>
		/// <param name="radius">円形の半径 </param>
		/// <param name="value">値 </param>
		/// <param name="fallout">周囲のぼかし(0～1) </param>
		public void RaiseHeightWithCircle(float x, float y, float radius, float value, float fallout)
		{
			CoreInstance.RaiseHeightWithCircle(x, y, radius, value, fallout);
		}

		/// <summary>
		/// 円形に地形を指定した高度に設定する。 
		/// </summary>
		/// <param name="x">円形の中心座標 </param>
		/// <param name="y">円形の中心座標 </param>
		/// <param name="radius">円形の半径 </param>
		/// <param name="value">高度 </param>
		/// <param name="fallout">周囲のぼかし(0～1) </param>
		public void ChangeHeightWithCircle(float x, float y, float radius, float value, float fallout)
		{
			CoreInstance.ChangeHeightWithCircle(x, y, radius, value, fallout);
		}

		/// <summary>
		/// 円形に地形を平滑化させる。 
		/// </summary>
		/// <param name="x">円形の中心座標 </param>
		/// <param name="y">円形の中心座標 </param>
		/// <param name="radius">円形の半径 </param>
		/// <param name="value">平滑度(0～1) </param>
		/// <param name="fallout">周囲のぼかし(0～1) </param>
		public void SmoothHeightWithCircle(float x, float y, float radius, float value, float fallout)
		{
			CoreInstance.SmoothHeightWithCircle(x, y, radius, value, fallout);
		}

		/// <summary>
		/// 円形に崖の生成を伴う地形の上下をさせる。 
		/// </summary>
		/// <param name="x">円形の中心座標 </param>
		/// <param name="y">円形の中心座標 </param>
		/// <param name="radius">円形の半径 </param>
		/// <param name="value">値 </param>
		public void ChangeCliffesWithCircle(float x, float y, float radius, int value)
		{
			CoreInstance.ChangeCliffesWithCircle(x, y, radius, value);
		}

		/// <summary>
		/// 光線を飛ばし、衝突した位置を取得する。 
		/// </summary>
		/// <param name="from">光線を飛ばす元の位置 </param>
		/// <param name="to">光線を飛ばす先の位置 </param>
		/// <returns>光線が地形に衝突した位置。衝突しない場合、NaNを返す。 </returns>
		public asd.Vector3DF CastRay(asd.Vector3DF from, asd.Vector3DF to)
		{
			return CoreInstance.CastRay(ref from, ref to);
		}

	}


	/// <summary>
	/// 
	/// </summary>
	public partial class Texture2D
	{
		internal asd.swig.Texture2D CoreInstance { get; set; }

		/// <summary>
		/// テクスチャのサイズを取得する。
		/// </summary>
		public asd.Vector2DI Size
		{
			get { return CoreInstance.GetSize(); }
		}

		/// <summary>
		/// テクスチャのフォーマットを取得する。
		/// </summary>
		public TextureFormat Format
		{
			get { return (asd.TextureFormat)CoreInstance.GetFormat(); }
		}

		/// <summary>
		/// テクスチャのクラスの種類を取得する。
		/// </summary>
		public TextureClassType Type
		{
			get { return (asd.TextureClassType)CoreInstance.GetType(); }
		}


		/// <summary>
		/// テクスチャをファイルに保存する。 
		/// </summary>
		/// <param name="path">出力先 </param>
		/// <returns>成否 </returns>
		public bool Save(string path)
		{
			return CoreInstance.Save(path);
		}

		/// <summary>
		/// テクスチャをアンロックする。 
		/// </summary>
		public void Unlock()
		{
			CoreInstance.Unlock();
		}

	}


	/// <summary>
	/// ツールを開発するための低レイヤーな命令群のクラス 
	/// </summary>
	public partial class Tool
	{
		internal asd.swig.Tool CoreInstance { get; set; }

		/// <summary>
		/// 現在の行のインデックスを取得する。
		/// </summary>
		public int ColumnIndex
		{
			get { return CoreInstance.GetColumnIndex(); }
		}


		/// <summary>
		/// フルスクリーンでウインドウの表示を開始する。 
		/// </summary>
		/// <param name="name">ウインドウ名 </param>
		/// <param name="offset">ウインドウ上部の位置のオフセット </param>
		/// <returns></returns>
		public bool BeginFullscreen(string name, int offset)
		{
			return CoreInstance.BeginFullscreen(name, offset);
		}

		/// <summary>
		/// ウインドウの表示を開始する。 
		/// </summary>
		/// <param name="name">ウインドウ名 </param>
		/// <returns></returns>
		public bool Begin(string name)
		{
			return CoreInstance.Begin(name);
		}

		/// <summary>
		/// ウインドウの表示を終了する。 
		/// </summary>
		public void End()
		{
			CoreInstance.End();
		}

		/// <summary>
		/// 分割線を表示する。 
		/// </summary>
		public void Separator()
		{
			CoreInstance.Separator();
		}

		/// <summary>
		/// 次に表示する要素を改行せずに表示する。 
		/// </summary>
		public void SameLine()
		{
			CoreInstance.SameLine();
		}

		/// <summary>
		/// テキストを表示する。 
		/// </summary>
		/// <param name="text">テキスト名 </param>
		public void Text(string text)
		{
			CoreInstance.Text(text);
		}

		/// <summary>
		/// ボタンを表示する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <returns></returns>
		public bool Button(string label)
		{
			return CoreInstance.Button(label);
		}

		/// <summary>
		/// 画像を表示する。 
		/// </summary>
		/// <param name="user_texture">画像 </param>
		/// <param name="size">大きさ </param>
		public void Image(Texture2D user_texture, asd.Vector2DF size)
		{
			asd.swig.Texture2D user_textureCore = null;
			if(user_texture != null)
			{
				user_textureCore = user_texture.CoreInstance;
			}
			CoreInstance.Image(user_textureCore, ref size);
		}

		/// <summary>
		/// コンボボックスを表示する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <param name="preview_value">コンボボックスの先頭に表示される文字列 </param>
		/// <returns></returns>
		public bool BeginCombo(string label, string preview_value)
		{
			return CoreInstance.BeginCombo(label, preview_value);
		}

		/// <summary>
		/// コンボボックスを表示を終了する。 
		/// </summary>
		/// <remarks>
		/// BeginComboがtrueを返した場合のみ、実行する。 
		/// </remarks>
		public void EndCombo()
		{
			CoreInstance.EndCombo();
		}

		/// <summary>
		/// 文字を入力する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <param name="buf">文字が格納されるバッファ </param>
		/// <param name="buf_size">バッファサイズ </param>
		/// <returns></returns>
		/// <remarks>
		/// bufはutf-8である。 
		/// </remarks>
		public bool InputText(string label, sbyte[] buf, int buf_size)
		{
			return CoreInstance.InputText(label, buf, buf_size);
		}

		/// <summary>
		/// 整数を入力する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <param name="v">値 </param>
		/// <returns></returns>
		public bool InputInt(string label, int[] v)
		{
			return CoreInstance.InputInt(label, v);
		}

		/// <summary>
		/// 色を変更する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <param name="vs">色(RGB+A) </param>
		/// <returns></returns>
		public bool ColorEdit4(string label, float[] vs)
		{
			return CoreInstance.ColorEdit4(label, vs);
		}

		/// <summary>
		/// 選択可能な文字列を表示する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <param name="selected">選択されているか? </param>
		/// <returns></returns>
		public bool Selectable(string label, bool selected)
		{
			return CoreInstance.Selectable(label, selected);
		}

		/// <summary>
		/// リストボックスを表示する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <param name="current_item">選択されているアイテム </param>
		/// <param name="items">アイテム(;区切り) </param>
		/// <returns></returns>
		/// <remarks>
		/// 仕様が大きく変更される可能性がある。 
		/// </remarks>
		public bool ListBox(string label, int[] current_item, string items)
		{
			return CoreInstance.ListBox(label, current_item, items);
		}

		/// <summary>
		/// 画面上のメニューバーの表示を開始する。 
		/// </summary>
		/// <returns></returns>
		public bool BeginMainMenuBar()
		{
			return CoreInstance.BeginMainMenuBar();
		}

		/// <summary>
		/// 画面上のメニューバーの表示を終了する。 
		/// </summary>
		/// <remarks>
		/// BeginMainMenuBarがtrueを返した場合のみ、実行する。 
		/// </remarks>
		public void EndMainMenuBar()
		{
			CoreInstance.EndMainMenuBar();
		}

		/// <summary>
		/// メニューバー(ウインドウ等)の表示を開始する。 
		/// </summary>
		/// <returns></returns>
		public bool BeginMenuBar()
		{
			return CoreInstance.BeginMenuBar();
		}

		/// <summary>
		/// メニューバーの表示を終了する。 
		/// </summary>
		/// <remarks>
		/// BeginMenuBarがtrueを返した場合のみ、実行する。 
		/// </remarks>
		public void EndMenuBar()
		{
			CoreInstance.EndMenuBar();
		}

		/// <summary>
		/// メニューの表示を開始する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <returns></returns>
		public bool BeginMenu(string label)
		{
			return CoreInstance.BeginMenu(label);
		}

		/// <summary>
		/// メニューの表示を終了する。 
		/// </summary>
		/// <remarks>
		/// BeginMenuがtrueを返した場合のみ、実行する。 
		/// </remarks>
		public void EndMenu()
		{
			CoreInstance.EndMenu();
		}

		/// <summary>
		/// メニューアイテムを表示する。 
		/// </summary>
		/// <param name="label">ラベル名 </param>
		/// <param name="shortcut">ショートカット </param>
		/// <param name="p_selected">選択されているか? </param>
		/// <returns></returns>
		public bool MenuItem(string label, string shortcut, bool[] p_selected)
		{
			return CoreInstance.MenuItem(label, shortcut, p_selected);
		}

		/// <summary>
		/// 行数を設定する。 
		/// </summary>
		/// <param name="count">行数 </param>
		public void Columns(int count)
		{
			CoreInstance.Columns(count);
		}

		/// <summary>
		/// 次の行に移動する。 
		/// </summary>
		public void NextColumn()
		{
			CoreInstance.NextColumn();
		}

		/// <summary>
		/// 行の幅を取得する。 
		/// </summary>
		/// <param name="column_index">インデックス </param>
		/// <returns></returns>
		public float GetColumnWidth(int column_index)
		{
			return CoreInstance.GetColumnWidth(column_index);
		}

		/// <summary>
		/// 行の幅を設定する。 
		/// </summary>
		/// <param name="column_index">インデックス </param>
		/// <param name="width">幅 </param>
		public void SetColumnWidth(int column_index, float width)
		{
			CoreInstance.SetColumnWidth(column_index, width);
		}

		/// <summary>
		/// 現在選択されているアイテムにフォーカスを設定する。 
		/// </summary>
		public void SetItemDefaultFocus()
		{
			CoreInstance.SetItemDefaultFocus();
		}

		/// <summary>
		/// ファイルを開くダイアログを開く。 
		/// </summary>
		/// <param name="filterList">フィルタ </param>
		/// <param name="defaultPath">最初に表示するディレクトリのパス </param>
		/// <returns>開くパス </returns>
		public string OpenDialog(string filterList, string defaultPath)
		{
			return CoreInstance.OpenDialog(filterList, defaultPath);
		}

		/// <summary>
		/// ファイルを保存するダイアログを開く。 
		/// </summary>
		/// <param name="filterList">フィルタ </param>
		/// <param name="defaultPath">最初に表示するディレクトリのパス </param>
		/// <returns>保存するパス </returns>
		public string SaveDialog(string filterList, string defaultPath)
		{
			return CoreInstance.SaveDialog(filterList, defaultPath);
		}

		/// <summary>
		/// フォルダを選択するダイアログを開く。 
		/// </summary>
		/// <param name="defaultPath">最初に表示するディレクトリのパス </param>
		/// <returns>フォルダのパス </returns>
		public string PickFolder(string defaultPath)
		{
			return CoreInstance.PickFolder(defaultPath);
		}

		/// <summary>
		/// フォントを追加する。 
		/// </summary>
		/// <param name="filename">フォントへのパス </param>
		/// <param name="size_pixels">フォントサイズ </param>
		/// <remarks>
		/// 現在、パッケージからは読み込めない。実行ファイルからの相対パスを指定する。 
		/// </remarks>
		public void AddFontFromFileTTF(string filename, float size_pixels)
		{
			CoreInstance.AddFontFromFileTTF(filename, size_pixels);
		}

		/// <summary>
		/// ダイアログを表示する。 
		/// </summary>
		/// <param name="message">メッセージ </param>
		/// <param name="title">タイトル </param>
		/// <param name="style">ダイアログの種類 </param>
		/// <param name="buttons">ボタンの種類 </param>
		/// <returns></returns>
		public ToolDialogSelection ShowDialog(string message, string title, ToolDialogStyle style, ToolDialogButtons buttons)
		{
			return (asd.ToolDialogSelection)CoreInstance.ShowDialog(message, title, (asd.swig.ToolDialogStyle)style, (asd.swig.ToolDialogButtons)buttons);
		}

	}


}
